
{{alias}}( N[, options] )
    Returns an accumulator function which incrementally performs binary
    classification using stochastic gradient descent (SGD).

    If provided a feature vector and response value, the accumulator function
    updates a binary classification model and returns updated model
    coefficients.

    If not provided a feature vector and response value, the accumulator
    function returns the current model coefficients.

    Stochastic gradient descent is sensitive to the scaling of the features. One
    is advised to either scale each feature to `[0,1]` or `[-1,1]` or to
    transform the features into z-scores with zero mean and unit variance. One
    should keep in mind that the same scaling has to be applied to test vectors
    in order to obtain accurate predictions.

    In general, the more data provided to an accumulator, the more reliable the
    model predictions.

    Parameters
    ----------
    N: integer
        Number of features.

    options: Object (optional)
        Function options.

    options.intercept: boolean (optional)
        Boolean indicating whether to include an intercept. Default: true.

    options.lambda: number (optional)
        Regularization parameter. Default: 1.0e-4.

    options.learningRate: ArrayLike (optional)
        Learning rate function and associated (optional) parameters. The first
        array element specifies the learning rate function and must be one of
        the following: 'basic', 'constant', or 'pegasos'. When using a constant
        learning rate function, the second array element specifies the learning
        rate. Default: ['basic'].

    options.loss: string (optional)
        Loss function. Must be one of the following: 'hinge', 'log',
        'modifiedHuber', 'perceptron', or 'squaredHinge'. Default: 'log'.

    Returns
    -------
    acc: Function
        Accumulator function.

    acc.predict: Function
        Predicts a response value for a provided observation vector. Provide a
        second argument to specify the prediction type (either 'probability' or
        'link'; default: 'link'). Note that the probability prediction type is
        only compatible with 'log' and 'modifiedHuber' loss functions.

    Examples
    --------
    // Create an accumulator:
    > var opts = {};
    > opts.intercept = true;
    > opts.lambda = 1.0e-5;
    > var acc = {{alias}}( 3, opts );

    // Update the model:
    > var buf = new {{alias:@stdlib/array/float64}}( [ 2.3, 1.0, 5.0 ] );
    > var x = {{alias:@stdlib/ndarray/array}}( buf );
    > var coefs = acc( x, 1 )
    <ndarray>

    // Create a new observation vector:
    > buf = new {{alias:@stdlib/array/float64}}( [ 2.3, 5.3, 8.6 ] );
    > x = {{alias:@stdlib/ndarray/array}}( buf );

    // Predict the response value:
    > var yhat = acc.predict( x )
    <number>

    See Also
    --------

