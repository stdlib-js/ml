{"version":3,"file":"index.mjs","sources":["../incr/binary-classification/lib/model.js","../incr/binary-classification/lib/validate.js","../incr/binary-classification/lib/main.js","../incr/binary-classification/lib/index.js","../incr/kmeans/lib/matrix.js","../incr/kmeans/lib/copy_matrix.js","../incr/kmeans/lib/vector.js","../incr/kmeans/lib/copy_vector.js","../incr/kmeans/lib/validate.js","../incr/kmeans/lib/normalize.js","../incr/kmeans/lib/normalize_matrix.js","../incr/kmeans/lib/standardize.js","../incr/kmeans/lib/standardize_matrix.js","../incr/kmeans/lib/init_sample.js","../incr/kmeans/lib/euclidean.js","../incr/kmeans/lib/squared_euclidean.js","../incr/kmeans/lib/dot.js","../incr/kmeans/lib/squared_cosine.js","../incr/kmeans/lib/squared_correlation.js","../incr/kmeans/lib/init_kmeansplusplus.js","../incr/kmeans/lib/init_forgy.js","../incr/kmeans/lib/find_closest_centroid.js","../incr/kmeans/lib/update_centroid.js","../incr/kmeans/lib/init_clusters.js","../incr/kmeans/lib/init.js","../incr/kmeans/lib/stats.js","../incr/kmeans/lib/incrstats.js","../incr/kmeans/lib/main.js","../incr/kmeans/lib/index.js","../incr/sgd-regression/lib/dot.js","../incr/sgd-regression/lib/weight_vector.js","../incr/sgd-regression/lib/regularize.js","../incr/sgd-regression/lib/loss/epsilon_insensitive.js","../incr/sgd-regression/lib/loss/squared_error.js","../incr/sgd-regression/lib/loss/huber.js","../incr/sgd-regression/lib/eta_factory.js","../incr/sgd-regression/lib/validate.js","../incr/sgd-regression/lib/main.js","../incr/sgd-regression/lib/index.js","../incr/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar format = require( '@stdlib/string/format' );\nvar gdot = require( '@stdlib/blas/base/gdot' ).ndarray;\nvar gaxpy = require( '@stdlib/blas/base/gaxpy' ).ndarray;\nvar dcopy = require( '@stdlib/blas/base/dcopy' );\nvar dscal = require( '@stdlib/blas/base/dscal' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar sigmoid = require( '@stdlib/math/base/special/expit' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar ndarray = require( '@stdlib/ndarray/ctor' );\nvar shape2strides = require( '@stdlib/ndarray/base/shape2strides' );\nvar numel = require( '@stdlib/ndarray/base/numel' );\nvar vind2bind = require( '@stdlib/ndarray/base/vind2bind' );\n\n\n// VARIABLES //\n\nvar MIN_SCALING_FACTOR = 1.0e-7;\nvar MIN_SCALE = 1.0e-11;\nvar LEARNING_RATE_METHODS = {\n\t'basic': '_basicLearningRate',\n\t'constant': '_constantLearningRate',\n\t'invscaling': '_inverseScalingLearningRate',\n\t'pegasos': '_pegasosLearningRate'\n};\nvar LOSS_METHODS = {\n\t'hinge': '_hingeLoss',\n\t'log': '_logLoss',\n\t'modifiedHuber': '_modifiedHuberLoss',\n\t'perceptron': '_perceptronLoss',\n\t'squaredHinge': '_squaredHingeLoss'\n};\n\n\n// MAIN //\n\n/**\n* Model constructor.\n*\n* ## Notes\n*\n* -   The model (weight vector) implementation is inspired by the [sofia-ml][sofia-ml] library.\n*\n* [sofia-ml]: https://code.google.com/archive/p/sofia-ml/\n*\n* @private\n* @constructor\n* @param {PositiveInteger} N - number of feature weights (excluding bias/intercept term)\n* @param {Options} opts - model options\n* @param {PositiveNumber} opts.lambda - regularization parameter\n* @param {ArrayLikeObject} opts.learningRate - learning rate function and associated parameters\n* @param {string} opts.loss - loss function\n* @param {boolean} opts.intercept - boolean indicating whether to include an intercept\n* @returns {Model} model\n*/\nfunction Model( N, opts ) {\n\tvar len;\n\n\t// Set internal properties:\n\tthis._N = N;\n\tthis._opts = opts;\n\n\tthis._scaleFactor = 1.0;\n\tthis._t = 0; // iteration counter (i.e., number of updates)\n\n\t// Determine the learning rate function:\n\tthis._learningRateMethod = LEARNING_RATE_METHODS[ opts.learningRate[ 0 ] ];\n\n\t// Determine the loss function:\n\tthis._lossMethod = LOSS_METHODS[ opts.loss ];\n\n\t// Determine the number of model coefficients:\n\tlen = N;\n\tif ( opts.intercept ) {\n\t\tlen += 1;\n\t}\n\t// Initialize a model weight vector with all weights set to zero:\n\tthis._weights = new Float64Array( len );\n\n\t// Initialize model coefficients to zero:\n\tthis._coefficients = new ndarray( 'float64', new Float64Array( len ), [ len ], [ 1 ], 0, 'row-major' );\n\n\treturn this;\n}\n\n/**\n* Adds a provided input vector to the model weight vector.\n*\n* @private\n* @name _add\n* @memberof Model.prototype\n* @type {Function}\n* @param {VectorLike} x - input vector\n* @param {number} scale - scale factor\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_add', function add( x, scale ) {\n\tvar s = scale / this._scaleFactor;\n\tvar w = this._weights;\n\n\t// Scale `x` and add to the model weight vector:\n\tgaxpy( x.shape[ 0 ], s, x.data, x.strides[ 0 ], x.offset, w, 1, 0 );\n\n\t// If an intercept is assumed, treat `x` as containing one additional element equal to one...\n\tif ( this._opts.intercept ) {\n\t\tw[ this._N ] += s;\n\t}\n\treturn this;\n});\n\n/**\n* Computes a learning rate.\n*\n* ## Notes\n*\n* -   This learning rate function is based on the learning rate function of the same name in the [sofia-ml][sofia-ml] library.\n*\n* [sofia-ml]: https://code.google.com/archive/p/sofia-ml/\n*\n* @private\n* @name _basicLearningRate\n* @memberof Model.prototype\n* @type {Function}\n* @returns {number} learning rate\n*/\nsetReadOnly( Model.prototype, '_basicLearningRate', function basic() {\n\treturn 10.0 / ( 10.0+this._t );\n});\n\n/**\n* Returns a constant learning rate.\n*\n* @private\n* @name _constantLearningRate\n* @memberof Model.prototype\n* @type {Function}\n* @returns {number} learning rate\n*/\nsetReadOnly( Model.prototype, '_constantLearningRate', function constant() {\n\treturn this._opts.learningRate[ 1 ];\n});\n\n/**\n* Calculates the dot product of the model weight vector and a provided vector `x`.\n*\n* @private\n* @name _dot\n* @memberof Model.prototype\n* @type {Function}\n* @param {NumericArray} buf - ndarray data buffer\n* @param {integer} stride - stride\n* @param {NonNegativeInteger} offset - index offset\n* @returns {number} dot product\n*/\nsetReadOnly( Model.prototype, '_dot', function dot( buf, stride, offset ) {\n\tvar v = gdot( this._N, this._weights, 1, 0, buf, stride, offset );\n\tif ( this._opts.intercept ) {\n\t\tv += this._weights[ this._N ];\n\t}\n\tv *= this._scaleFactor;\n\treturn v;\n});\n\n/**\n* Updates the model weight vector using the hinge loss function.\n*\n* ## Notes\n*\n* -   The hinge loss function is defined as\n*\n*     ```tex\n*     L(y, f(x)) = \\max\\{ 0, 1 - y\\,f(x) \\}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     f(x) = w^T x + b\n*     ```\n*\n*     with \\\\(w\\\\) being the model weight vector and \\\\(b\\\\) being the intercept.\n*\n* @private\n* @name _hingeLoss\n* @memberof Model.prototype\n* @type {Function}\n* @param {VectorLike} x - feature vector\n* @param {integer} y - response value\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_hingeLoss', function hingeLoss( x, y ) {\n\tvar eta;\n\tvar d;\n\n\teta = this[ this._learningRateMethod ]();\n\tthis._regularize( eta );\n\n\td = this._dot( x.data, x.strides[ 0 ], x.offset );\n\tif ( ( y*d ) < 1.0 ) {\n\t\tthis._add( x, y*eta );\n\t}\n\treturn this;\n});\n\n/**\n* Computes a learning rate according to an inverse scaling formula.\n*\n* ## Notes\n*\n* -   The inverse scaling formula is defined as\n*\n*     ```tex\n*     \\eta = \\frac{\\eta_0}{t^{k}}\n*     ```\n*\n*     where \\\\(\\eta_0\\\\) is an initial learning rate, \\\\(t\\\\) is the current iteration, and \\\\(k\\\\) is an exponent controlling how quickly the learning rate decreases.\n*\n* @private\n* @name _inverseScalingLearningRate\n* @memberof Model.prototype\n* @type {Function}\n* @returns {number} learning rate\n*/\nsetReadOnly( Model.prototype, '_inverseScalingLearningRate', function invscaling() {\n\tvar params = this._opts.learningRate;\n\treturn params[ 1 ] / pow( this._t, params[ 2 ] );\n});\n\n/**\n* Updates the model weight vector using the log loss function.\n*\n* ## Notes\n*\n* -   The log loss function is defined as\n*\n*     ```tex\n*     L(y, f(x)) = \\ln( 1 + \\exp( -y\\,f(x) ) )\n*     ```\n*\n*     where\n*\n*     ```tex\n*     f(x) = w^T x + b\n*     ```\n*\n*     with \\\\(w\\\\) being the model weight vector and \\\\(b\\\\) being the intercept.\n*\n*\n* @private\n* @name _logLoss\n* @memberof Model.prototype\n* @type {Function}\n* @param {VectorLike} x - feature vector\n* @param {integer} y - response value\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_logLoss', function logLoss( x, y ) {\n\tvar loss;\n\tvar eta;\n\tvar d;\n\n\teta = this[ this._learningRateMethod ]();\n\tthis._regularize( eta );\n\n\td = this._dot( x.data, x.strides[ 0 ], x.offset );\n\tloss = y / ( 1.0 + exp( y*d ) );\n\tthis._add( x, eta*loss );\n\n\treturn this;\n});\n\n/**\n* Updates the model weight vector using the modified Huber loss function.\n*\n* ## Notes\n*\n* -   The modified Huber loss function is defined as\n*\n*     ```tex\n*     L(y, f(x)) = \\begin{cases}\n*       \\max(0, 1 - y\\,f(x))^2 & \\textrm{for}\\,\\,y\\,f(x) \\geq -1\\\\\n*       -4y\\,f(x) & \\textrm{otherwise}\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     f(x) = w^T x + b\n*     ```\n*\n*     with \\\\(w\\\\) being the model weight vector and \\\\(b\\\\) being the intercept.\n*\n* ## References\n*\n* -   Zhang, Tong. 2004. \"Solving Large Scale Linear Prediction Problems Using Stochastic Gradient Descent Algorithms.\" In _Proceedings of the Twenty-First International Conference on Machine Learning_, 116. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/1015330.1015332][@zhang:2004a].\n*\n* [@zhang:2004a]: https://doi.org/10.1145/1015330.1015332\n*\n* @private\n* @name _modifiedHuberLoss\n* @memberof Model.prototype\n* @type {Function}\n* @param {VectorLike} x - feature vector\n* @param {integer} y - response value\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_modifiedHuberLoss', function modifiedHuber( x, y ) {\n\tvar eta;\n\tvar d;\n\n\teta = this[ this._learningRateMethod ]();\n\tthis._regularize( eta );\n\n\td = y * this._dot( x.data, x.strides[ 0 ], x.offset );\n\tif ( d < -1.0 ) {\n\t\tthis._add( x, 4.0*eta*y );\n\t} else {\n\t\tthis._add( x, eta*( y-(d*y) ) );\n\t}\n\treturn this;\n});\n\n/**\n* Computes a learning rate using Pegasos.\n*\n* ## References\n*\n* -   Shalev-Shwartz, Shai, Yoram Singer, Nathan Srebro, and Andrew Cotter. 2011. \"Pegasos: primal estimated sub-gradient solver for SVM.\" _Mathematical Programming_ 127 (1): 3–30. doi:[10.1007/s10107-010-0420-4][@shalevshwartz:2011a].\n*\n* [@shalevshwartz:2011a]: https://doi.org/10.1007/s10107-010-0420-4\n*\n* @private\n* @name _pegasos\n* @memberof Model.prototype\n* @type {Function}\n* @returns {number} learning rate\n*/\nsetReadOnly( Model.prototype, '_pegasosLearningRate', function pegasos() {\n\treturn 1.0 / ( this._opts.lambda*this._t );\n});\n\n/**\n* Updates the model weight vector using the perceptron loss function.\n*\n* ## Notes\n*\n* -   The perceptron loss function is defined as\n*\n*     ```tex\n*     L(y, f(x)) = \\max(0, -y\\,f(x))\n*     ```\n*\n*     where\n*\n*     ```tex\n*     f(x) = w^T x + b\n*     ```\n*\n*     with \\\\(w\\\\) being the model weight vector and \\\\(b\\\\) being the intercept.\n*\n* -   The perceptron loss function is equivalent to the hinge loss function without a margin.\n*\n* -   The perceptron loss function does not update the model weight vector when the response is correctly classified.\n*\n* ## References\n*\n* -   Rosenblatt, Frank. 1957. \"The Perceptron–a perceiving and recognizing automaton.\" 85-460-1. Buffalo, NY, USA: Cornell Aeronautical Laboratory.\n*\n* @private\n* @name _perceptronLoss\n* @memberof Model.prototype\n* @type {Function}\n* @param {VectorLike} x - feature vector\n* @param {integer} y - response value\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_perceptronLoss', function perceptron( x, y ) {\n\tvar eta;\n\tvar d;\n\n\teta = this[ this._learningRateMethod ]();\n\tthis._regularize( eta );\n\n\td = this._dot( x.data, x.strides[ 0 ], x.offset );\n\tif ( ( y*d ) <= 0.0 ) {\n\t\tthis._add( x, y*eta );\n\t}\n\treturn this;\n});\n\n/**\n* Performs L2 regularization of the model weights.\n*\n* @private\n* @name _regularize\n* @memberof Model.prototype\n* @type {Function}\n* @param {PositiveNumber} eta - learning rate\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_regularize', function regularize( eta ) {\n\tvar lambda = this._opts.lambda;\n\tif ( lambda <= 0.0 ) {\n\t\treturn this;\n\t}\n\tthis._scale( max( 1.0-( eta*lambda ), MIN_SCALING_FACTOR ) );\n\treturn this;\n});\n\n/**\n* Scale the model weight vector by a provided scaling factor.\n*\n* @private\n* @name _scale\n* @memberof Model.prototype\n* @type {Function}\n* @param {number} factor - scaling factor\n* @throws {RangeError} scaling factor must be a positive number\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_scale', function scale( factor ) {\n\tvar s;\n\tif ( factor <= 0.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Attempting to scale a weight vector by a nonpositive value. This is likely due to too large a value of `eta*lambda`. Value: `%f`.', factor ) );\n\t}\n\t// Check whether we need to scale the weight vector to unity in order to avoid numerical issues...\n\ts = this._scaleFactor;\n\tif ( s < MIN_SCALE ) {\n\t\t// Note: we only scale/shrink the feature weights, not the intercept...\n\t\tdscal( this._N, s, this._weights, 1 );\n\t\tthis._scaleFactor = 1.0;\n\t}\n\tthis._scaleFactor *= factor;\n\treturn this;\n});\n\n/**\n* Updates the model weight vector using the squared hinge loss function.\n*\n* ## Notes\n*\n* -   The squared hinge loss function is defined as\n*\n*     ```tex\n*     L(y, f(x)) = \\max\\{ 0, 1 - y\\,f(x) \\}^2\n*     ```\n*\n*     where\n*\n*     ```tex\n*     f(x) = w^T x + b\n*     ```\n*\n*     with \\\\(w\\\\) being the model weight vector and \\\\(b\\\\) being the intercept.\n*\n* @private\n* @name _squaredHingeLoss\n* @memberof Model.prototype\n* @type {Function}\n* @param {VectorLike} x - feature vector\n* @param {integer} y - response value\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, '_squaredHingeLoss', function squaredHingeLoss( x, y ) {\n\tvar eta;\n\tvar d;\n\n\teta = this[ this._learningRateMethod ]();\n\tthis._regularize( eta );\n\n\td = y * this._dot( x.data, x.strides[ 0 ], x.offset );\n\tif ( d < 1.0 ) {\n\t\tthis._add( x, eta*( y-(d*y) ) );\n\t}\n\treturn this;\n});\n\n/**\n* Returns the model coefficients.\n*\n* @private\n* @name coefficients\n* @memberof Model.prototype\n* @type {Function}\n* @returns {ndarray} model coefficients\n*/\nsetReadOnlyAccessor( Model.prototype, 'coefficients', function coefficients() {\n\tvar c = this._coefficients.data;\n\tvar w = this._weights;\n\tdcopy( w.length, w, 1, c, 1 );\n\tdscal( this._N, this._scaleFactor, c, 1 );\n\treturn this._coefficients;\n});\n\n/**\n* Returns the number of model features.\n*\n* @private\n* @name nfeatures\n* @memberof Model.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( Model.prototype, 'nfeatures', function nfeatures() {\n\treturn this._N;\n});\n\n/**\n* Predicts the response value for one or more observation vectors `X`.\n*\n* @private\n* @name predict\n* @memberof Model.prototype\n* @type {Function}\n* @param {ndarray} X - feature vector\n* @param {string} type - prediction type\n* @returns {ndarray} ndarray containing response values\n*/\nsetReadOnly( Model.prototype, 'predict', function predict( X, type ) {\n\tvar ndims;\n\tvar xbuf;\n\tvar ybuf;\n\tvar xsh;\n\tvar ysh;\n\tvar ord;\n\tvar ptr;\n\tvar sxn;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar M;\n\tvar N;\n\tvar Y;\n\tvar v;\n\tvar i;\n\n\t// Cache input array properties in case of lazy evaluation:\n\txbuf = X.data;\n\txsh = X.shape;\n\tsx = X.strides;\n\tox = X.offset;\n\tord = X.order;\n\n\tndims = xsh.length - 1;\n\n\t// The output array shape is the same as the input array shape without the last dimension (i.e., the number of dimensions is reduced by one)...\n\tysh = [];\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tysh.push( xsh[ i ] );\n\t}\n\t// Create an output array...\n\tif ( ndims === 0 ) {\n\t\tM = 1;\n\t\tybuf = new Float64Array( 1 );\n\t\tsy = [ 0 ];\n\t} else {\n\t\tM = numel( ysh );\n\t\tybuf = new Float64Array( M );\n\t\tsy = shape2strides( ysh, ord );\n\t}\n\tY = new ndarray( 'int8', ybuf, ysh, sy, 0, ord );\n\n\t// Loop over all observation vectors...\n\tN = this._N; // number of features (i.e., size of last `X` dimension)\n\tsxn = sx[ ndims ]; // stride of the last `X` dimension\n\tfor ( i = 0; i < M; i++ ) {\n\t\t// Compute the index offset into the underlying data buffer pointing to the start of the current observation vector:\n\t\tptr = vind2bind( xsh, sx, ox, ord, i*N, 'throw' );\n\n\t\t// Compute the dot product of the current observation vector with the model weight vector:\n\t\tv = this._dot( xbuf, sxn, ptr );\n\n\t\t// Determine the output value:\n\t\tif ( type === 'label' ) {\n\t\t\tv = ( v > 0 ) ? 1 : -1;\n\t\t} else if ( type === 'probability' ) {\n\t\t\tv = sigmoid( v );\n\t\t} // else type === 'linear' (i.e., linear predictor)\n\n\t\t// Set the element in the output array:\n\t\tif ( ndims === 0 ) {\n\t\t\tY.iset( v );\n\t\t} else {\n\t\t\tY.iset( i, v );\n\t\t}\n\t}\n\treturn Y;\n});\n\n/**\n* Updates a model given a provided observation vector and response value.\n*\n* @private\n* @name update\n* @memberof Model.prototype\n* @type {Function}\n* @param {VectorLike} x - feature vector\n* @param {integer} y - response value\n* @returns {Model} model instance\n*/\nsetReadOnly( Model.prototype, 'update', function update( x, y ) {\n\tthis._t += 1;\n\treturn this[ this._lossMethod ]( x, y );\n});\n\n\n// EXPORTS //\n\nmodule.exports = Model;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/assert/contains' );\nvar format = require( '@stdlib/string/format' );\nvar LEARNING_RATES = require( './learning_rates.json' );\nvar LOSS_FUNCTIONS = require( './loss_functions.json' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.lambda] - regularization parameter\n* @param {ArrayLikeObject} [options.learningRate] - learning rate function\n* @param {string} [options.loss] - loss function\n* @param {boolean} [options.intercept] - specifies whether an intercept should be included\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar name;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'intercept' ) ) {\n\t\topts.intercept = options.intercept;\n\t\tif ( !isBoolean( opts.intercept ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'intercept', opts.intercept ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'lambda' ) ) {\n\t\topts.lambda = options.lambda;\n\t\tif ( !isNonNegativeNumber( opts.lambda ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'lambda', opts.lambda ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'learningRate' ) ) {\n\t\tif ( !isArrayLikeObject( options.learningRate ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array-like object. Option: `%s`.', 'learningRate', options.learningRate ) );\n\t\t}\n\t\tname = options.learningRate[ 0 ];\n\t\topts.learningRate[ 0 ] = name;\n\t\tif ( !contains( LEARNING_RATES, name ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. First `%s` option must be one of the following: \"%s\". Option: `%s`.', 'learningRate', LEARNING_RATES.join( '\", \"' ), name ) );\n\t\t}\n\t\tif ( options.learningRate.length > 1 ) {\n\t\t\tif ( name === 'constant' || name === 'invscaling' ) {\n\t\t\t\topts.learningRate[ 1 ] = options.learningRate[ 1 ];\n\t\t\t\tif ( !isPositiveNumber( opts.learningRate[ 1 ] ) ) {\n\t\t\t\t\treturn new TypeError( format( 'invalid option. Second `%s` option must be a positive number. Option: `%s`.', 'learningRate', opts.learningRate[ 1 ] ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( options.learningRate.length > 2 ) {\n\t\t\tif ( name === 'invscaling' ) {\n\t\t\t\topts.learningRate[ 2 ] = options.learningRate[ 2 ];\n\t\t\t\tif ( !isNumber( opts.learningRate[ 2 ] ) ) {\n\t\t\t\t\treturn new TypeError( format( 'invalid option. Third `%s` option must be a number. Option: `%s`.', 'learningRate', opts.learningRate[ 2 ] ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'loss' ) ) {\n\t\topts.loss = options.loss;\n\t\tif ( !contains( LOSS_FUNCTIONS, opts.loss ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'loss', LOSS_FUNCTIONS.join( '\", \"' ), opts.loss ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isVectorLike = require( '@stdlib/assert/is-vector-like' );\nvar isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar format = require( '@stdlib/string/format' );\nvar Model = require( './model.js' );\nvar LEARNING_RATE_DEFAULTS = require( './learning_rate_defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally performs binary classification using stochastic gradient descent (SGD).\n*\n* ## Method\n*\n* -   The sub-gradient of the loss function is estimated for each datum and the classification model is updated incrementally, with a decreasing learning rate and regularization of model feature weights using L2 regularization.\n*\n* ## References\n*\n* -   Shalev-Shwartz, S., Singer, Y., Srebro, N., & Cotter, A. (2011). Pegasos: Primal estimated sub-gradient solver for SVM. Mathematical Programming, 127(1), 3–30. doi:10.1007/s10107-010-0420-4\n*\n* @param {PositiveInteger} N - number of features\n* @param {Options} [options] - options object\n* @param {PositiveNumber} [options.lambda=1.0e-3] - regularization parameter\n* @param {ArrayLikeObject} [options.learningRate=['basic']] - learning rate function and associated parameters (one of `basic`, `constant`, or `pegasos`)\n* @param {string} [options.loss='log'] - loss function (one of `hinge`, `log`, `modifiedHuber`, `perceptron`, or `squaredHinge`)\n* @param {boolean} [options.intercept=true] - boolean indicating whether to include an intercept\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} accumulator\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var array = require( '@stdlib/ndarray/array' );\n*\n* // Create an accumulator:\n* var accumulator = incrBinaryClassification( 3, {\n*     'intercept': true,\n*     'lambda': 1.0e-5\n* });\n*\n* // ...\n*\n* // Update the model:\n* var x = array( new Float64Array( [ 2.3, 1.0, 5.0 ] ) );\n* var coefs = accumulator( x, 1 );\n* // returns <ndarray>\n*\n* // ...\n*\n* // Create a new observation vector:\n* x = array( new Float64Array( [ 2.3, 5.3, 8.6 ] ) );\n*\n* // Predict the response value:\n* var yhat = accumulator.predict( x );\n* // returns <ndarray>\n*/\nfunction incrBinaryClassification( N, options ) {\n\tvar model;\n\tvar opts;\n\tvar err;\n\n\tif ( !isPositiveInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', N ) );\n\t}\n\topts = {\n\t\t'intercept': true,\n\t\t'lambda': 1.0e-4,\n\t\t'learningRate': LEARNING_RATE_DEFAULTS[ 'basic' ].slice(),\n\t\t'loss': 'log'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmodel = new Model( N, opts );\n\n\t// Attach methods to the accumulator:\n\tsetReadOnly( accumulator, 'predict', predict );\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a feature vector and response value, the accumulator function updates a binary classification model; otherwise, the accumulator function returns the current binary classification model coefficients.\n\t*\n\t* @private\n\t* @param {VectorLike} x - feature vector\n\t* @param {integer} y - response value\n\t* @throws {TypeError} first argument must be a one-dimensional ndarray\n\t* @throws {TypeError} first argument must be a one-dimensional ndarray whose length matches the number of model features\n\t* @throws {TypeError} second argument must be either `+1` or `-1`\n\t* @returns {ndarray} one-dimensional ndarray containing model coefficients\n\t*\n\t* @example\n\t* var Float64Array = require( '@stdlib/array/float64' );\n\t* var array = require( '@stdlib/ndarray/array' );\n\t*\n\t* // Create an accumulator:\n\t* var accumulator = incrBinaryClassification( 3 );\n\t*\n\t* // ...\n\t*\n\t* // Update the model:\n\t* var x = array( new Float64Array( [ 2.3, 1.0, 5.0 ] ) );\n\t* var coefs = accumulator( x, 1 );\n\t* // returns <ndarray>\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn model.coefficients;\n\t\t}\n\t\tif ( !isVectorLike( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a one-dimensional ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( y !== -1 && y !== 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either +1 or -1. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( x.shape[ 0 ] !== model.nfeatures ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a one-dimensional ndarray of length `%u`. Actual length: `%u`.', model.nfeatures, x.shape[ 0 ] ) );\n\t\t}\n\t\tmodel.update( x, y );\n\t\treturn model.coefficients;\n\t}\n\n\t/**\n\t* Predicts the response value for one or more observation vectors `X`.\n\t*\n\t* @private\n\t* @param {ndarrayLike} X - ndarray (of size `(...,N)`) containing observation vectors\n\t* @param {string} [type=\"label\"] - prediction type (either `label`, `probability`, or `linear`)\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must be an ndarray whose last dimension matches the number of model features\n\t* @throws {TypeError} second argument must be a recognized/supported prediction \"type\"\n\t* @throws {Error} second argument must be compatible with the model loss function\n\t* @returns {ndarray} ndarray (of size `(...)`) containing response values\n\t*\n\t* @example\n\t* var Float64Array = require( '@stdlib/array/float64' );\n\t* var array = require( '@stdlib/ndarray/array' );\n\t*\n\t* // Create an accumulator:\n\t* var accumulator = incrBinaryClassification( 3 );\n\t*\n\t* // ...\n\t*\n\t* // Create a new observation vector:\n\t* var x = array( new Float64Array( [ 2.3, 5.3, 8.6 ] ) );\n\t*\n\t* // Predict the response value:\n\t* var yhat = accumulator.predict( x );\n\t* // returns <ndarray>\n\t*/\n\tfunction predict( X, type ) {\n\t\tvar sh;\n\t\tvar t;\n\t\tif ( !isndarrayLike( X ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', X ) );\n\t\t}\n\t\tsh = X.shape;\n\t\tif ( sh[ sh.length-1 ] !== N ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray whose last dimension is of size `%u`. Actual size: `%u`.', N, sh[ sh.length-1 ] ) );\n\t\t}\n\t\tt = 'label';\n\t\tif ( arguments.length > 1 ) {\n\t\t\tif ( type === 'probability' ) {\n\t\t\t\tif ( opts.loss !== 'log' && opts.loss !== 'modifiedHuber' ) {\n\t\t\t\t\tthrow new Error( format( 'invalid argument. Second argument is incompatible with model loss function. Probability predictions are only supported when the loss function is either `log` or `modifiedHuber`. Model loss function: `%s`.', opts.loss ) );\n\t\t\t\t}\n\t\t\t} else if ( type !== 'label' && type !== 'linear' ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a string value equal to either \"label\", \"probability\", or \"linear\". Value: `%s`.', type ) );\n\t\t\t}\n\t\t\tt = type;\n\t\t}\n\t\treturn model.predict( X, t );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrBinaryClassification;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Incrementally perform binary classification using stochastic gradient descent (SGD).\n*\n* @module @stdlib/ml/incr/binary-classification\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var array = require( '@stdlib/ndarray/array' );\n* var incrBinaryClassification = require( '@stdlib/ml/incr/binary-classification' );\n*\n* // Create an accumulator:\n* var accumulator = incrBinaryClassification( 3, {\n*     'intercept': true,\n*     'lambda': 1.0e-5\n* });\n*\n* // ...\n*\n* // Update the model:\n* var x = array( new Float64Array( [ 2.3, 1.0, 5.0 ] ) );\n* var coefs = accumulator( x, 1 );\n* // returns <ndarray>\n*\n* // ...\n*\n* // Create a new observation vector:\n* x = array( new Float64Array( [ 2.3, 5.3, 8.6 ] ) );\n*\n* // Predict the response value:\n* var yhat = accumulator.predict( x );\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nvar incrBinaryClassification = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrBinaryClassification;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array/float64' );\nvar ctor = require( '@stdlib/ndarray/ctor' );\nvar bctor = require( '@stdlib/ndarray/base/ctor' );\n\n\n// MAIN //\n\n/**\n* Returns a matrix.\n*\n* @private\n* @param {PositiveInteger} m - number of rows\n* @param {PositiveInteger} n - number of columns\n* @param {boolean} bool - boolean indicating whether to create a low-level ndarray\n* @returns {ndarray} matrix\n*/\nfunction createMatrix( m, n, bool ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\tvar f;\n\n\tif ( bool ) {\n\t\tf = bctor;\n\t} else {\n\t\tf = ctor;\n\t}\n\tbuffer = new Float64Array( m*n );\n\tshape = [ m, n ];\n\tstrides = [ n, 1 ];\n\treturn f( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = createMatrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gcopy = require( '@stdlib/blas/base/gcopy' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Copies matrix elements to another matrix.\n*\n* ## Notes\n*\n* -   Why not just use `gcopy` directly? Because `gcopy` 1) assumes only a single stride per strided array and 2) as we cannot assume that a source matrix is single-segment contiguous, we fall back to copying source matrix \"chunks\" (rows) to a destination matrix. Assuming the source matrix is row-major, then the implementation should be reasonably performant.\n*\n* @private\n* @param {ndarray} Y - destination matrix\n* @param {ndarray} X - source matrix\n* @returns {ndarray} destination matrix\n*/\nfunction copyMatrix( Y, X ) { // TODO: once an ndarray engine is written, determine whether this function can be replaced by a standalone package\n\tvar xbuf;\n\tvar ybuf;\n\tvar sx1;\n\tvar sx2;\n\tvar sy1;\n\tvar sy2;\n\tvar ox;\n\tvar oy;\n\tvar M;\n\tvar N;\n\tvar i;\n\n\tM = X.shape[ 0 ];\n\tN = X.shape[ 1 ];\n\n\txbuf = X.data;\n\tybuf = Y.data;\n\n\tsx1 = X.strides[ 0 ];\n\tsx2 = X.strides[ 1 ];\n\n\tsy1 = Y.strides[ 0 ];\n\tsy2 = Y.strides[ 1 ];\n\n\tox = X.offset;\n\toy = Y.offset;\n\n\tfor ( i = 0; i < M; i++ ) {\n\t\tgcopy( N, xbuf, sx2, ox, ybuf, sy2, oy );\n\t\tox += sx1;\n\t\toy += sy1;\n\t}\n\treturn Y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = copyMatrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array/float64' );\nvar ctor = require( '@stdlib/ndarray/ctor' );\nvar bctor = require( '@stdlib/ndarray/base/ctor' );\n\n\n// MAIN //\n\n/**\n* Returns a vector.\n*\n* @private\n* @param {PositiveInteger} N - number of elements\n* @param {boolean} bool - boolean indicating whether to create a low-level ndarray\n* @returns {ndarray} vector\n*/\nfunction createVector( N, bool ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\tvar f;\n\n\tif ( bool ) {\n\t\tf = bctor;\n\t} else {\n\t\tf = ctor;\n\t}\n\tbuffer = new Float64Array( N );\n\tshape = [ N ];\n\tstrides = [ 1 ];\n\treturn f( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = createVector;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gcopy = require( '@stdlib/blas/base/gcopy' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Copies vector elements to another vector.\n*\n* @private\n* @param {ndarray} out - destination vector\n* @param {ndarray} src - source vector\n* @returns {ndarray} destination vector\n*/\nfunction copyVector( out, src ) {\n\tgcopy( src.shape[0], src.data, src.strides[0], src.offset, out.data, out.strides[0], out.offset ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = copyVector;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar contains = require( '@stdlib/assert/contains' );\nvar format = require( '@stdlib/string/format' );\nvar METRICS = require( './metrics.json' );\nvar INIT_METHODS = require( './init_methods.json' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.metric] - distance metric\n* @param {ArrayLikeObject} [options.init] - method for determining initial centroids\n* @param {boolean} [options.normalize] - boolean indicating whether to normalize incoming data\n* @param {boolean} [options.copy] - boolean indicating whether to copy incoming data to prevent mutation during normalization\n* @param {*} [options.seed] - PRNG seed\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'metric': 'euclidean',\n*     'init': [ 'kmeans++', 1, 1 ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'metric' ) ) {\n\t\topts.metric = options.metric;\n\t\tif ( !contains( METRICS, opts.metric ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'metric', METRICS.join( '\", \"' ), opts.metric ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'init' ) ) {\n\t\tif ( !isArrayLike( options.init ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array-like object. Option: `%s`.', 'init', options.init ) );\n\t\t}\n\t\tif ( !contains( INIT_METHODS, options.init[ 0 ] ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option method must be one of the following: \"%s\". Option: `%s`.', 'init', INIT_METHODS.join( '\", \"' ), options.init[ 0 ] ) );\n\t\t}\n\t\topts.init[ 0 ] = options.init[ 0 ];\n\t\tif ( options.init.length > 1 ) {\n\t\t\topts.init[ 1 ] = options.init[ 1 ];\n\t\t\tif ( !isPositiveInteger( opts.init[ 1 ] ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. First `init` parameter option must be a positive integer. Option: `%s`.', opts.init[ 1 ] ) );\n\t\t\t}\n\t\t}\n\t\tif ( options.init.length > 2 ) {\n\t\t\topts.init[ 2 ] = options.init[ 2 ];\n\t\t\tif ( !isPositiveInteger( opts.init[ 2 ] ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. Second `init` parameter option must be a positive integer. Option: `%s`.', opts.init[ 2 ] ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'normalize' ) ) {\n\t\topts.normalize = options.normalize;\n\t\tif ( !isBoolean( opts.normalize ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'normalize', opts.normalize ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Normalizes a vector.\n*\n* @private\n* @param {NonNegativeInteger} N - number of elements\n* @param {NumericArray} X - strided array\n* @param {integer} strideX - stride\n* @param {NonNegativeInteger} offsetX - index offset\n* @returns {NumericArray} input array\n*/\nfunction normalize( N, X, strideX, offsetX ) { // TODO: eventually remove this function once project has implemented comparable functionality as a standalone package (e.g., BLAS, which may avoid the naive approach susceptible to overflow/overflow due to summing squares and computing the square root)\n\tvar xi;\n\tvar m;\n\tvar v;\n\tvar i;\n\n\tm = 0.0;\n\n\t// Compute the vector magnitude...\n\txi = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = X[ xi ];\n\t\tm += v * v;\n\t\txi += strideX;\n\t}\n\tm = sqrt( m );\n\n\t// Normalize the vector...\n\txi = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tX[ xi ] /= m;\n\t}\n\treturn X;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar norm = require( './normalize.js' );\n\n\n// MAIN //\n\n/**\n* Normalizes matrix elements by row magnitudes.\n*\n* @private\n* @param {ndarray} mat - matrix to normalize\n* @returns {ndarray} input matrix\n*/\nfunction normalize( mat ) { // TODO: eventually remove this function once project has implemented comparable functionality as a standalone package\n\tvar mbuf;\n\tvar sm1;\n\tvar sm2;\n\tvar om;\n\tvar M;\n\tvar N;\n\tvar i;\n\n\tmbuf = mat.data;\n\tM = mat.shape[ 0 ];\n\tN = mat.shape[ 1 ];\n\tsm1 = mat.strides[ 0 ];\n\tsm2 = mat.strides[ 1 ];\n\tom = mat.offset;\n\n\tfor ( i = 0; i < M; i++ ) {\n\t\t// Normalize a matrix row:\n\t\tnorm( N, mbuf, sm2, om );\n\n\t\t// Update the index offset to point to the next row:\n\t\tom += sm1;\n\t}\n\treturn mat;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Normalizes a vector by standardization.\n*\n* @private\n* @param {NonNegativeInteger} N - number of elements\n* @param {NumericArray} X - strided array\n* @param {integer} strideX - stride\n* @param {NonNegativeInteger} offsetX - index offset\n* @param {NumericArray} mean - strided array containing the sample mean along each dimension\n* @param {integer} strideM - stride\n* @param {NonNegativeInteger} offsetM - index offset\n* @param {NumericArray} stdev - strided array containing the standard deviation along each dimension\n* @param {integer} strideS - stride\n* @param {NonNegativeInteger} offsetS - index offset\n* @returns {ndarray} input array\n*/\nfunction standardize( N, X, strideX, offsetX, mean, strideM, offsetM, stdev, strideS, offsetS ) { // eslint-disable-line max-len\n\tvar xi;\n\tvar mi;\n\tvar si;\n\tvar i;\n\n\t// TODO: consider moving to an \"extended\" BLAS package\n\n\txi = offsetX;\n\tmi = offsetM;\n\tsi = offsetS;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tX[ xi ] = ( X[ xi ] - mean[ mi ] ) / stdev[ si ];\n\t\txi += strideX;\n\t\tmi += strideM;\n\t\tsi += strideS;\n\t}\n\treturn X;\n}\n\n\n// EXPORTS //\n\nmodule.exports = standardize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar norm = require( './standardize.js' );\n\n\n// MAIN //\n\n/**\n* Normalizes matrix elements by standardization.\n*\n* @private\n* @param {ndarray} mat - matrix to normalize\n* @param {Float64Array} stats - strided array containing the mean and standard deviation along each dimension\n* @returns {ndarray} input matrix\n*/\nfunction standardize( mat, stats ) { // TODO: eventually remove this function once project has implemented comparable functionality as a standalone package\n\tvar mbuf;\n\tvar sm1;\n\tvar sm2;\n\tvar om;\n\tvar M;\n\tvar N;\n\tvar i;\n\n\tmbuf = mat.data;\n\tM = mat.shape[ 0 ];\n\tN = mat.shape[ 1 ];\n\tsm1 = mat.strides[ 0 ];\n\tsm2 = mat.strides[ 1 ];\n\tom = mat.offset;\n\n\tfor ( i = 0; i < M; i++ ) {\n\t\t// Normalize a matrix row:\n\t\tnorm( N, mbuf, sm2, om, stats, 2, 0, stats, 2, 1 ); // Magic numbers come from knowing that the `stats` array is interleaved\n\n\t\t// Update the index offset to point to the next row:\n\t\tom += sm1;\n\t}\n\treturn mat;\n}\n\n\n// EXPORTS //\n\nmodule.exports = standardize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( '@stdlib/random/sample' ).factory;\nvar dcopy = require( '@stdlib/blas/base/dcopy' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Initializes centroids by randomly sampling from a data buffer.\n*\n* @private\n* @param {ndarray} out - output centroids `kxd` matrix\n* @param {ndarray} buffer - buffer from which to sample\n* @param {*} seed - PRNG seed\n* @returns {ndarray} centroids\n*/\nfunction sample( out, buffer, seed ) {\n\tvar rand;\n\tvar inds;\n\tvar obuf;\n\tvar buf;\n\tvar sb1;\n\tvar sb2;\n\tvar so2;\n\tvar oo;\n\tvar s;\n\tvar M;\n\tvar N;\n\tvar i;\n\n\tM = out.shape[ 0 ];\n\tN = out.shape[ 1 ];\n\n\tobuf = out.data;\n\tso2 = out.strides[ 1 ];\n\too = out.offset;\n\n\tbuf = buffer.data;\n\tsb1 = buffer.strides[ 0 ];\n\tsb2 = buffer.strides[ 1 ];\n\n\t// Generate an array of data vector indices...\n\tinds = [];\n\tfor ( i = 0; i < buffer.shape[ 0 ]; i++ ) {\n\t\tinds.push( i );\n\t}\n\t// Only randomly sample from the data buffer if the number of centroids is not equal to the number of data vectors...\n\tif ( M === inds.length ) {\n\t\t// Buffer already qualifies as a \"random\" sample:\n\t\ts = inds;\n\t} else {\n\t\t// Create a seeded random sampler (without replacement):\n\t\trand = factory({\n\t\t\t'seed': seed,\n\t\t\t'size': M,\n\t\t\t'mutate': false,\n\t\t\t'replacement': false\n\t\t});\n\n\t\t// Generate a random sample:\n\t\ts = rand( inds );\n\t}\n\t// Update the centroids...\n\tfor ( i = 0; i < M; i++ ) {\n\t\t// Note: the following is likely to be an \"out-of-order\" copy...\n\t\tdcopy( N, buf, sb2, sb1*s[i], obuf, so2, oo );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the Euclidean distance between two vectors.\n*\n* @private\n* @param {NonNegativeInteger} N - number of elements\n* @param {NumericArray} X - strided array\n* @param {PositiveInteger} strideX - stride\n* @param {NonNegativeInteger} offsetX - index offset\n* @param {NumericArray} Y - strided array\n* @param {PositiveInteger} strideY - stride\n* @param {NonNegativeInteger} offsetY - index offset\n* @returns {number} Euclidean distance\n*/\nfunction euclidean( N, X, strideX, offsetX, Y, strideY, offsetY ) { // TODO: remove and use BLAS implementation\n\tvar xi;\n\tvar yi;\n\tvar d;\n\tvar s;\n\tvar i;\n\n\txi = offsetX;\n\tyi = offsetY;\n\ts = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = X[ xi ] - Y[ yi ];\n\t\ts += d * d;\n\t\txi += strideX;\n\t\tyi += strideY;\n\t}\n\treturn sqrt( s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = euclidean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar euclidean = require( './euclidean.js' );\n\n\n// MAIN //\n\n/**\n* Computes the squared Euclidean distance between two data points.\n*\n* @private\n* @param {NonNegativeInteger} N - number of elements\n* @param {NumericArray} X - strided array\n* @param {PositiveInteger} strideX - stride\n* @param {NonNegativeInteger} offsetX - index offset\n* @param {NumericArray} Y - strided array\n* @param {PositiveInteger} strideY - stride\n* @param {NonNegativeInteger} offsetY - index offset\n* @returns {number} squared Euclidean distance\n*/\nfunction squaredEuclidean( N, X, strideX, offsetX, Y, strideY, offsetY ) { // TODO: consider moving to an \"extended\" BLAS package\n\tvar d = euclidean( N, X, strideX, offsetX, Y, strideY, offsetY );\n\treturn d * d;\n}\n\n\n// EXPORTS //\n\nmodule.exports = squaredEuclidean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the dot product of two vectors.\n*\n* @private\n* @param {NonNegativeInteger} N - number of elements\n* @param {NumericArray} X - strided array\n* @param {PositiveInteger} strideX - stride\n* @param {NonNegativeInteger} offsetX - index offset\n* @param {NumericArray} Y - strided array\n* @param {PositiveInteger} strideY - stride\n* @param {NonNegativeInteger} offsetY - index offset\n* @returns {number} dot product\n*/\nfunction dot( N, X, strideX, offsetX, Y, strideY, offsetY ) { // TODO: remove and use BLAS implementation\n\tvar xi;\n\tvar yi;\n\tvar s;\n\tvar i;\n\n\txi = offsetX;\n\tyi = offsetY;\n\ts = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += X[ xi ] * Y[ yi ];\n\t\txi += strideX;\n\t\tyi += strideY;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dot = require( './dot.js' );\n\n\n// MAIN //\n\n/**\n* Computes the squared cosine distance between two data points.\n*\n* @private\n* @param {NonNegativeInteger} N - number of elements\n* @param {NumericArray} X - strided array\n* @param {PositiveInteger} strideX - stride\n* @param {NonNegativeInteger} offsetX - index offset\n* @param {NumericArray} Y - strided array\n* @param {PositiveInteger} strideY - stride\n* @param {NonNegativeInteger} offsetY - index offset\n* @returns {number} squared cosine distance\n*/\nfunction squaredCosine( N, X, strideX, offsetX, Y, strideY, offsetY ) { // TODO: consider moving to an \"extended\" BLAS package\n\tvar d = 1.0 - dot( N, X, strideX, offsetX, Y, strideY, offsetY );\n\treturn d * d;\n}\n\n\n// EXPORTS //\n\nmodule.exports = squaredCosine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dot = require( './dot.js' );\n\n\n// MAIN //\n\n/**\n* Computes the squared correlation distance between two data points.\n*\n* @private\n* @param {NonNegativeInteger} N - number of elements\n* @param {NumericArray} X - strided array\n* @param {PositiveInteger} strideX - stride\n* @param {NonNegativeInteger} offsetX - index offset\n* @param {NumericArray} Y - strided array\n* @param {PositiveInteger} strideY - stride\n* @param {NonNegativeInteger} offsetY - index offset\n* @returns {number} squared correlation distance\n*/\nfunction squaredCorrelation( N, X, strideX, offsetX, Y, strideY, offsetY ) { // TODO: consider moving to an \"extended\" BLAS package\n\tvar d = 1.0 - dot( N, X, strideX, offsetX, Y, strideY, offsetY );\n\treturn d * d;\n}\n\n\n// EXPORTS //\n\nmodule.exports = squaredCorrelation;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar randint = require( '@stdlib/random/base/discrete-uniform' ).factory;\nvar randu = require( '@stdlib/random/base/mt19937' ).factory;\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar dcopy = require( '@stdlib/blas/base/dcopy' ).ndarray;\nvar squaredEuclidean = require( './squared_euclidean.js' );\nvar squaredCosine = require( './squared_cosine.js' );\nvar squaredCorrelation = require( './squared_correlation.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Applies a function for calculating the squared distance between each data point and a specified centroid.\n*\n* @private\n* @param {Array} out - output array\n* @param {Function} dist - distance function to apply\n* @param {PositiveInteger} npts - number of data points\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {ndarray} matrix - data point matrix\n* @param {NonNegativeInteger} ci - centroid row index\n* @returns {Array} output array\n*/\nfunction dapply( out, dist, npts, ndims, matrix, ci ) {\n\tvar offsetC;\n\tvar offsetD;\n\tvar strideD;\n\tvar buf;\n\tvar i;\n\n\tbuf = matrix.data;\n\n\tstrideD = matrix.strides[ 0 ];\n\toffsetC = strideD * ci;\n\toffsetD = 0;\n\n\tfor ( i = 0; i < npts; i++ ) {\n\t\tout[ i ] = dist( ndims, buf, 1, offsetD, buf, 1, offsetC ); // Magic number `1` for stride is based on knowing that the matrix is row-major single-segment contiguous\n\t\toffsetD += strideD;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Initializes centroids by performing the k-means++ initialization procedure.\n*\n* ## Method\n*\n* The k-means++ algorithm for choosing initial centroids is as follows:\n*\n* 1.  Select a data point uniformly at random from a data set \\\\( X \\\\). This data point is first centroid and denoted \\\\( c_0 \\\\).\n*\n* 2.  Compute the distance from each data point to \\\\( c_0 \\\\). Denote the distance between \\\\( c_j \\\\) and data point \\\\( m \\\\) as \\\\( d(x_m, c_j) \\\\).\n*\n* 3.  Select the next centroid, \\\\( c_1 \\\\), at random from \\\\( X \\\\) with probability\n*\n*     ```tex\n*     \\frac{d^2(x_m, c_0)}{\\sum_{j=0}^{n-1} d^2(x_j, c_0)}\n*     ```\n*\n*     where \\\\( n \\\\) is the number of data points.\n*\n* 4.  To choose centroid \\\\( j \\\\),\n*\n*     a.   Compute the distances from each data point to each centroid and assign each data point to its closest centroid.\n*\n*     b.   For \\\\( i = 0,\\ldots,n-1 \\\\) and \\\\( p = 0,\\ldots,j-2 \\\\), select centroid \\\\( j \\\\) at random from \\\\( X \\\\) with probability\n*\n*          ```tex\n*          \\frac{d^2(x_i, c_p)}{\\sum_{\\{h; x_h \\exits C_p\\}} d^2(x_h, c_p)}\n*          ```\n*\n*          where \\\\( C_p \\\\) is the set of all data points closest to centroid \\\\( c_p \\\\) and \\\\( x_i \\\\) belongs to \\\\( c_p \\\\).\n*\n*          Stated more plainly, select each subsequent centroid with a probability proportional to the distance from the centroid to the closest centroid already chosen.\n*\n* 5.  Repeat step `4` until \\\\( k \\\\) centroids have been chosen.\n*\n* ## References\n*\n* -   Arthur, David, and Sergei Vassilvitskii. 2007. \"K-means++: The Advantages of Careful Seeding.\" In _Proceedings of the Eighteenth Annual Acm-Siam Symposium on Discrete Algorithms_, 1027–35. SODA '07. Philadelphia, PA, USA: Society for Industrial and Applied Mathematics. <http://dl.acm.org/citation.cfm?id=1283383.1283494>.\n*\n* @private\n* @param {ndarray} out - output centroids `kxd` matrix\n* @param {ndarray} buffer - data buffer\n* @param {string} metric - distance metric\n* @param {PositiveInteger} trials - number of potential centroids per iteration\n* @param {*} seed - PRNG seed\n* @returns {ndarray} centroids\n*/\nfunction kmeansplusplus( out, buffer, metric, trials, seed ) {\n\tvar centroids; // array of indices\n\tvar offsetC;\n\tvar randi;\n\tvar ndims;\n\tvar dhash;\n\tvar probs;\n\tvar rand;\n\tvar npts;\n\tvar csum;\n\tvar bsum;\n\tvar dist;\n\tvar obuf;\n\tvar buf;\n\tvar ind;\n\tvar sb1;\n\tvar sb2;\n\tvar so1;\n\tvar so2;\n\tvar oo;\n\tvar d2;\n\tvar bc;\n\tvar d;\n\tvar c;\n\tvar k;\n\tvar r;\n\tvar i;\n\tvar j;\n\tvar t;\n\n\tk = out.shape[ 0 ];\n\tndims = out.shape[ 1 ];\n\tnpts = buffer.shape[ 0 ];\n\n\tobuf = out.data;\n\tso1 = out.strides[ 0 ];\n\tso2 = out.strides[ 1 ];\n\too = out.offset;\n\n\tbuf = buffer.data;\n\tsb1 = buffer.strides[ 0 ];\n\tsb2 = buffer.strides[ 1 ];\n\n\t// Create seeded PRNGs:\n\trand = randu({\n\t\t'seed': seed\n\t});\n\trandi = randint({\n\t\t'seed': rand()\n\t});\n\trand = rand.normalized;\n\n\t// Determine the distance functions...\n\tif ( metric === 'cosine' ) {\n\t\tdist = squaredCosine;\n\t} else if ( metric === 'correlation' ) {\n\t\tdist = squaredCorrelation;\n\t} else {\n\t\tdist = squaredEuclidean;\n\t}\n\t// 1. Select a data point at random for the first centroid...\n\tc = randi( 0, npts-1 );\n\tif ( k === 1 ) {\n\t\t// For the trivial case of one centroid, we are done which means we can skip to setting the output centroid data...\n\t\treturn dcopy( ndims, buf, sb2, sb1*c, obuf, so2, oo );\n\t}\n\tcentroids = [ c ];\n\n\t// Create a scratch array for storing squared distances:\n\td2 = new Array( ndims );\n\n\t// Create a strided array for storing closest centroid results:\n\tdhash = new Array( npts*2 );\n\tind = 0;\n\tfor ( i = 0; i < npts; i++ ) {\n\t\tdhash[ ind ] = PINF; // squared distance\n\t\tdhash[ ind+1 ] = 0; // index of the closest centroid\n\t\tind += 2; // +stride\n\t}\n\t// Create a scratch array for storing cumulative probabilities:\n\tprobs = new Array( npts );\n\n\t// 2-5. For each data point, compute the distances to each centroid, find the closest centroid, and, based on the distance to the closest centroid, assign a probability to the data point to be chosen as centroid `c_j`...\n\tfor ( j = 1; j < k; j++ ) {\n\t\t// Note: instead of repeatedly computing centroid distances for each data point, we only need to compute the distances for the most recent centroid and to maintain a hash of closest distance results...\n\t\tdapply( d2, dist, npts, ndims, buffer, centroids[ j-1 ] );\n\t\tcsum = 0.0; // total cumulative distance\n\t\tind = 0;\n\t\tfor ( i = 0; i < npts; i++ ) {\n\t\t\tif ( d2[ i ] < dhash[ ind ] ) {\n\t\t\t\tdhash[ ind ] = d2[ i ];\n\t\t\t\tdhash[ ind+1 ] = j - 1;\n\t\t\t\tcsum += d2[ i ];\n\t\t\t} else {\n\t\t\t\tcsum += dhash[ ind ];\n\t\t\t}\n\t\t\tind += 2; // +stride\n\t\t}\n\t\t// Compute the cumulative probabilities...\n\t\tprobs[ 0 ] = dhash[ 0 ] / csum;\n\t\tind = 2;\n\t\tfor ( i = 1; i < npts; i++ ) {\n\t\t\tprobs[ i ] = probs[ i-1 ] + ( dhash[ ind ] / csum );\n\t\t\tind += 2; // +stride\n\t\t}\n\t\t// Based Arthur's and Vassilvitskii's paper \"kmeans++: The Advantages of Careful Seeding\" (see conclusion), randomly select candidate centroids and pick the candidate which minimizes the total squared distance...\n\t\tbsum = PINF; // best sum\n\t\tbc = -1; // best candidate\n\t\tfor ( t = 0; t < trials; t++ ) {\n\t\t\t// Use rejection sampling to handle edge case where the total cumulative probability does not equal unity due to accumulated floating-point errors and is less than `r` (*very* rarely should this require more than one iteration)...\n\t\t\tc = -1;\n\n\t\t\t// Note: the following should never choose an already chosen centroid (why? because a centroid's minimum squared distance is `0`, which means it will either correspond to a cumulative probability of `0` or will correspond to a cumulative probability equal to the previous cumulative probability, thus leading to the equivalent of a no-op iteration)\n\t\t\twhile ( c === -1 ) {\n\t\t\t\tr = rand(); // Note: `r` exists on the interval `[0,1)`\n\t\t\t\tfor ( i = 0; i < npts; i++ ) {\n\t\t\t\t\tif ( r < probs[ i ] ) {\n\t\t\t\t\t\tc = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Compute the sum of squared distances were we to include the candidate centroid...\n\t\t\tcsum = 0.0;\n\t\t\toffsetC = sb1 * c;\n\t\t\tind = 0;\n\t\t\tfor ( i = 0; i < npts; i++ ) {\n\t\t\t\td = dist( ndims, buf, 1, sb1*i, buf, 1, offsetC ); // Magic number `1` for stride as matrix is row-major single-segment contiguous\n\t\t\t\tif ( d < dhash[ ind ] ) {\n\t\t\t\t\tcsum += d;\n\t\t\t\t} else {\n\t\t\t\t\tcsum += dhash[ ind ];\n\t\t\t\t}\n\t\t\t\tind += 2; // +stride\n\t\t\t}\n\t\t\t// Determine if the candidate is the best candidate we have seen thus far...\n\t\t\tif ( csum < bsum ) {\n\t\t\t\tbsum = csum;\n\t\t\t\tbc = c;\n\t\t\t}\n\t\t}\n\t\t// Push the \"best\" candidate to our list of centroids:\n\t\tcentroids.push( bc );\n\t}\n\t// 6. Set centroid data...\n\tfor ( i = 0; i < k; i++ ) {\n\t\t// Note: the following is likely to be an \"out-of-order\" copy...\n\t\tdcopy( ndims, buf, sb2, sb1*centroids[i], obuf, so2, oo );\n\t\too += so1;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kmeansplusplus;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( '@stdlib/random/base/discrete-uniform' ).factory;\nvar incrmean = require( '@stdlib/stats/incr/mean' );\n\n\n// MAIN //\n\n/**\n* Initializes centroids by randomly assigning each data point to cluster and computing centroids.\n*\n* ## References\n*\n* -   Forgy, E. 1965. \"Cluster Analysis of Multivariate Data: Efficiency versus Interpretability of Classification.\" _Biometrics_ 21 (3): 768–69.\n*\n* @private\n* @param {ndarray} out - output centroids `kxd` matrix\n* @param {ndarray} buffer - buffer containing data points\n* @param {*} seed - PRNG seed\n* @returns {ndarray} centroids\n*/\nfunction forgy( out, buffer, seed ) {\n\tvar randi;\n\tvar obuf;\n\tvar npts;\n\tvar buf;\n\tvar sb1;\n\tvar sb2;\n\tvar so1;\n\tvar so2;\n\tvar acc;\n\tvar oo;\n\tvar oa;\n\tvar ob;\n\tvar c;\n\tvar M;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tM = out.shape[ 0 ];\n\tN = out.shape[ 1 ];\n\n\tobuf = out.data;\n\tso1 = out.strides[ 0 ];\n\tso2 = out.strides[ 1 ];\n\too = out.offset;\n\n\tbuf = buffer.data;\n\tnpts = buffer.shape[ 0 ];\n\tsb1 = buffer.strides[ 0 ];\n\tsb2 = buffer.strides[ 1 ];\n\tob = buffer.offset;\n\n\t// Initialize a PRNG for randomly assigning data points to clusters:\n\trandi = factory( 0, M-1, {\n\t\t'seed': seed\n\t});\n\n\t// Initialize a strided (MxN) array for storing accumulated centroids...\n\tacc = [];\n\tfor ( i = 0; i < M*N; i++ ) {\n\t\tacc.push( incrmean() );\n\t}\n\n\t// Randomly assign each data point to a cluster and update the respective cluster's centroid...\n\tfor ( i = 0; i < npts; i++ ) {\n\t\t// Generate a random cluster index:\n\t\tc = randi();\n\n\t\t// Compute the accumulator index offset:\n\t\toa = N * c;\n\n\t\t// Update the respective cluster centroid:\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tacc[ oa+j ]( buf[ ob+(sb2*j) ] );\n\t\t}\n\t\t// Update the data point index offset:\n\t\tob += sb1;\n\t}\n\t// Update the output matrix...\n\toa = 0;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tobuf[ oo+(so2*j) ] = acc[ oa ]();\n\t\t\toa += 1; // We can simply increment the array pointer as we know that the accumulator array is row-major single-segment contiguous\n\t\t}\n\t\too += so1;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = forgy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Finds the closest centroid.\n*\n* @private\n* @param {Function} dist - distance function\n* @param {PositiveInteger} k - number of clusters\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {NumericArray} C - strided array containing centroids\n* @param {PositiveInteger} strideC - centroid row stride\n* @param {NonNegativeInteger} offsetC - centroid index offset\n* @param {NumericArray} V - strided array containing a data point\n* @param {integer} strideV - vector stride\n* @param {NonNegativeInteger} offsetV - vector index offset\n* @returns {NonNegativeInteger} centroid index\n*/\nfunction closestCentroid( dist, k, ndims, C, strideC, offsetC, V, strideV, offsetV ) { // eslint-disable-line max-len\n\tvar cd;\n\tvar c;\n\tvar d;\n\tvar i;\n\n\tcd = PINF;\n\tfor ( i = 0; i < k; i++ ) {\n\t\t// Why the magic number `1`? Because we know that the centroids matrix should be row-major single-segment contiguous.\n\t\td = dist( ndims, C, 1, offsetC, V, strideV, offsetV );\n\t\tif ( d < cd ) {\n\t\t\tcd = d;\n\t\t\tc = i;\n\t\t}\n\t\toffsetC += strideC;\n\t}\n\treturn c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = closestCentroid;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Updates a centroid.\n*\n* ## Notes\n*\n* -   Uses Welford's algorithm for updating an arithmetic mean.\n*\n* @private\n* @param {PositiveInteger} ndims - number of dimensions\n* @param {PositiveInteger} N - number of data points in a cluster\n* @param {NumericArray} C - strided array containing centroids\n* @param {PositiveInteger} strideC - centroid column stride\n* @param {NonNegativeInteger} offsetC - centroid index offset\n* @param {NumericArray} V - strided array containing a data point\n* @param {integer} strideV - vector stride\n* @param {NonNegativeInteger} offsetV - vector index offset\n* @returns {NumericArray} strided array containing centroids\n*/\nfunction updateCentroid( ndims, N, C, strideC, offsetC, V, strideV, offsetV ) {\n\tvar delta;\n\tvar ci;\n\tvar i;\n\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tci = C[ offsetC ];\n\t\tdelta = V[ offsetV ] - ci;\n\t\tci += delta / N;\n\t\tC[ offsetC ] = ci;\n\n\t\toffsetC += strideC;\n\t\toffsetV += strideV;\n\t}\n\treturn C;\n}\n\n\n// EXPORTS //\n\nmodule.exports = updateCentroid;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar closestCentroid = require( './find_closest_centroid.js' );\nvar updateCentroid = require( './update_centroid.js' );\n\n\n// MAIN //\n\n/**\n* Initializes clusters and associated statistics given a set of centroids.\n*\n* ## Notes\n*\n* -   We follow the same approach when calculating cluster statistics as if the centroids had been provided by a user (i.e., not computed internally), as this ensures consistency with how statistics are computed when subsequent data vectors are provided to the accumulator.\n*\n* @private\n* @param {ndarray} data - matrix containing data points\n* @param {ndarray} centroids - matrix containing centroids\n* @param {ndarray} stats - matrix containing cluster statistics\n* @param {Function} acc - cluster statistics accumulator\n* @param {Function} dist - distance function\n*/\nfunction clusters( data, centroids, stats, acc, dist ) {\n\tvar ndims;\n\tvar cbuf;\n\tvar dbuf;\n\tvar npts;\n\tvar sc;\n\tvar sd;\n\tvar oc;\n\tvar od;\n\tvar N;\n\tvar k;\n\tvar c;\n\tvar d;\n\tvar i;\n\n\tk = centroids.shape[ 0 ];\n\tndims = centroids.shape[ 1 ];\n\tnpts = data.shape[ 0 ];\n\n\tcbuf = centroids.data;\n\tsc = centroids.strides[ 0 ];\n\n\tdbuf = data.data;\n\tsd = data.strides[ 0 ];\n\tod = 0;\n\n\tfor ( i = 0; i < npts; i++ ) {\n\t\t// Find the closest centroid by computing the distance from the provided data point to each centroid:\n\t\tc = closestCentroid( dist, k, ndims, cbuf, sc, 0, dbuf, 1, od ); // Magic numbers arise from knowing that matrices are row-major single-segment contiguous\n\n\t\t// Compute the centroids buffer index offset to point to the closest centroid:\n\t\toc = sc * c;\n\n\t\t// Update the closest centroid:\n\t\tN = stats.get( c, 0 ) + 1;\n\t\tupdateCentroid( ndims, N, cbuf, 1, oc, dbuf, 1, od ); // Magic number `1` as we know that these matrices are row-major single-segment contiguous\n\n\t\t// Recompute the distance based on the updated centroid position:\n\t\td = dist( ndims, cbuf, 1, oc, dbuf, 1, od ); // Magic number `1` as we know that these matrices are row-major single-segment contiguous\n\n\t\t// Update cluster statistics:\n\t\tacc( c, d );\n\n\t\t// Increment the data buffer index offset to point to the next data point:\n\t\tod += sd;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = clusters;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gcopy = require( '@stdlib/blas/base/gcopy' ).ndarray;\nvar createMatrix = require( './matrix.js' );\nvar norm = require( './normalize_matrix.js' );\nvar standardize = require( './standardize_matrix.js' );\nvar sample = require( './init_sample.js' );\nvar kmeansplusplus = require( './init_kmeansplusplus.js' );\nvar forgy = require( './init_forgy.js' );\nvar clusters = require( './init_clusters.js' );\n\n\n// MAIN //\n\n/**\n* Returns an initialization accumulator for computing initial centroids.\n*\n* @private\n* @param {ndarray} centroids - matrix for storing centroids\n* @param {ndarray} stats - matrix for storing cluster statistics\n* @param {Function} clusterstats - cluster statistics accumulator\n* @param {(Function|void)} incrstats - mean vector accumulator\n* @param {Function} dist - distance function\n* @param {Options} opts - accumulator options\n* @param {string} opts.metric - distance metric\n* @param {Array} opts.init - initialization metric and associated parameters\n* @param {boolean} opts.normalize - boolean indicating whether to normalize incoming data (only relevant for non-Euclidean distance metrics)\n* @param {*} opts.seed - PRNG seed\n* @returns {Function} accumulator\n*/\nfunction init( centroids, stats, clusterstats, incrstats, dist, opts ) {\n\tvar buffer;\n\tvar ndims;\n\n\tndims = centroids.shape[ 1 ];\n\treturn accumulator;\n\n\t/**\n\t* Computes initial centroids and associated cluster statistics.\n\t*\n\t* @private\n\t* @param {ndarray} v - data vector\n\t* @returns {boolean} boolean indicating whether an accumulator has finished computing initial centroids\n\t*/\n\tfunction accumulator( v ) {\n\t\t// If this is the first data vector, we need to begin caching data vectors for future centroid initialization...\n\t\tif ( buffer === void 0 ) {\n\t\t\tbuffer = createMatrix( opts.init[1], ndims, true ); // low-level\n\t\t\tbuffer.count = 0;\n\t\t}\n\t\t// Check if we are still building our cache of data vectors...\n\t\tif ( buffer.count < opts.init[ 1 ] ) {\n\t\t\t// Copy data into the buffer (why? because (1) we have no guarantee that program execution is synchronous, and, thus, we have no guarantee that data vectors will not have been mutated before sampling, and (2) we can freely mutate buffer data, as may be needed during normalization):\n\t\t\tgcopy( ndims, v.data, v.strides[0], v.offset, buffer.data, buffer.strides[1], buffer.strides[0]*buffer.count ); // eslint-disable-line max-len\n\n\t\t\t// Increment the data vector counter:\n\t\t\tbuffer.count += 1;\n\n\t\t\t// Only proceed to perform centroid initialization if the cache is still not full...\n\t\t\tif ( buffer.count < opts.init[ 1 ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// If required by the metric, normalize the data vectors along the dimensions...\n\t\tif ( opts.normalize ) {\n\t\t\tif ( opts.metric === 'cosine' ) {\n\t\t\t\tbuffer = norm( buffer );\n\t\t\t} else if ( opts.metric === 'correlation' ) {\n\t\t\t\tbuffer = standardize( buffer, incrstats() );\n\t\t\t}\n\t\t}\n\t\t// Compute initial centroids...\n\t\tif ( opts.init[ 0 ] === 'forgy' ) {\n\t\t\tcentroids = forgy( centroids, buffer, opts.seed );\n\t\t} else if ( opts.init[ 0 ] === 'sample' ) {\n\t\t\tcentroids = sample( centroids, buffer, opts.seed );\n\t\t} else {\n\t\t\tcentroids = kmeansplusplus( centroids, buffer, opts.metric, opts.init[2], opts.seed ); // eslint-disable-line max-len\n\t\t}\n\t\t// Compute initial clusters:\n\t\tclusters( buffer, centroids, stats, clusterstats, dist );\n\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = init;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator for computing cluster statistics.\n*\n* @private\n* @param {ndarray} out - matrix for storing cluster statistics\n* @param {PositiveInteger} k - number of clusters\n* @returns {Function} accumulator\n*/\nfunction stats( out, k ) {\n\tvar M2;\n\tvar i;\n\n\t// Create an array for storing second moments:\n\tM2 = [];\n\tfor ( i = 0; i < k; i++ ) {\n\t\tM2.push( 0.0 );\n\t}\n\n\treturn accumulator;\n\n\t/**\n\t* Updates cluster statistics.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} c - cluster index to which a data point belongs\n\t* @param {number} dist - a data point's squared distance to its respective centroid\n\t* @returns {ndarray} matrix containing cluster statistics\n\t*/\n\tfunction accumulator( c, dist ) {\n\t\tvar delta;\n\t\tvar mu;\n\t\tvar N;\n\n\t\t// Update number of data points belonging to a cluster:\n\t\tN = out.get( c, 0 ) + 1;\n\t\tout.set( c, 0, N );\n\n\t\t// Update the total sum of squared distances within a cluster:\n\t\tout.set( c, 1, out.get( c, 1 )+dist );\n\n\t\t// Update the cluster's squared distance mean and standard deviation (using Welford's algorithm):\n\t\tmu = out.get( c, 2 );\n\t\tdelta = dist - mu;\n\t\tmu += delta / N;\n\t\tM2[ c ] += delta * ( dist-mu );\n\t\tout.set( c, 2, mu );\n\t\tout.set( c, 3, sqrt( M2[c]/(N-1) ) );\n\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = stats;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmeanstdev = require( '@stdlib/stats/incr/meanstdev' );\nvar Float64Array = require( '@stdlib/array/float64' );\n\n\n// MAIN //\n\n/**\n* Initializes incremental accumulators for computing the mean vector and associated standard deviation along each dimension.\n*\n* @private\n* @param {PositiveInteger} ndims - number of dimensions\n* @returns {Object} accumulators\n*/\nfunction incrstats( ndims ) {\n\tvar stride;\n\tvar nstats;\n\tvar acc;\n\tvar out;\n\tvar ob;\n\tvar i;\n\n\t// Define the number of computed statistics:\n\tnstats = 2;\n\n\t// Create a single linear array in which to store accumulated statistics:\n\tout = new Float64Array( ndims*nstats );\n\n\t// Define the array buffer stride (in bytes):\n\tstride = nstats * out.BYTES_PER_ELEMENT;\n\n\t// Initialize accumulators which will write to sections of the linear array:\n\tacc = [];\n\tob = 0;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tacc.push( incrmeanstdev( new Float64Array( out.buffer, ob, nstats ) ) );\n\t\tob += stride; // buffer offset\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a data point vector, updates the mean vector and associated standard deviation along each dimension. If not provided a data point vector, returns the current mean vector and associated standard deviation along each dimension.\n\t*\n\t* @private\n\t* @param {ndarray} [vec] - data point vector\n\t* @returns {Float64Array} current mean vector and associated standard deviation along each dimension\n\t*/\n\tfunction accumulator( vec ) {\n\t\tvar i;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn out;\n\t\t}\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tacc[ i ]( vec.get( i ) );\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrstats;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isMatrixLike = require( '@stdlib/assert/is-matrix-like' );\nvar isVectorLike = require( '@stdlib/assert/is-vector-like' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar format = require( '@stdlib/string/format' );\nvar minstd = require( '@stdlib/random/base/minstd-shuffle' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar dcopy = require( '@stdlib/blas/base/dcopy' );\nvar createMatrix = require( './matrix.js' );\nvar copyMatrix = require( './copy_matrix.js' );\nvar createVector = require( './vector.js' );\nvar copyVector = require( './copy_vector.js' );\nvar validate = require( './validate.js' );\nvar INIT_DEFAULTS = require( './init_defaults.json' );\nvar initialization = require( './init.js' );\nvar statistics = require( './stats.js' );\nvar incrstatistics = require( './incrstats.js' );\nvar squaredEuclidean = require( './squared_euclidean.js' );\nvar squaredCosine = require( './squared_cosine.js' );\nvar squaredCorrelation = require( './squared_correlation.js' );\nvar closestCentroid = require( './find_closest_centroid.js' );\nvar updateCentroid = require( './update_centroid.js' );\nvar normalize = require( './normalize.js' );\nvar normalizeMatrix = require( './normalize_matrix.js' );\nvar standardize = require( './standardize.js' );\nvar standardizeMatrix = require( './standardize_matrix.js' );\n\n\n// VARIABLES //\n\n// Number of cluster statistics:\nvar NSTATS = 4; // [ n_obs, sum_squared_dist, mean_squared_dist, stdev_squared_dist ]\n\n\n// FUNCTIONS //\n\n/**\n* Returns a results object.\n*\n* @private\n* @param {PositiveInteger} k - number of clusters\n* @param {PositiveInteger} ndims - number of dimensions\n* @returns {Object} results object\n*/\nfunction createResults( k, ndims ) {\n\tvar out = {};\n\tout.centroids = createMatrix( k, ndims, false ); // high-level\n\tout.stats = createMatrix( k, NSTATS, false ); // high-level\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally partitions data into `k` clusters.\n*\n* @param {(PositiveInteger|ndarray)} k - number of clusters or a `k x ndims` matrix containing initial centroids\n* @param {PositiveInteger} [ndims] - number of dimensions (should only be provided if provided a numeric `k` argument)\n* @param {Options} [options] - function options\n* @param {string} [options.metric=\"euclidean\"] - distance metric\n* @param {ArrayLikeObject} [options.init] - method for determining initial centroids\n* @param {boolean} [options.normalize=true] - boolean indicating whether to normalize incoming data (only relevant for non-Euclidean distance metrics)\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy incoming data to prevent mutation during normalization\n* @param {*} [options.seed] - PRNG seed\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} when using sampling to generate initial centroids, the sample size must be greater than or equal to the number of clusters\n* @returns {Function} accumulator function\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n*\n* // Define initial centroid locations:\n* var buffer = [\n*     0.0, 0.0,\n*     1.0, 1.0,\n*     1.0, -1.0,\n*     -1.0, -1.0,\n*     -1.0, 1.0\n* ];\n* var shape = [ 5, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var centroids = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a k-means accumulator:\n* var accumulator = incrkmeans( centroids );\n*\n* var out = accumulator();\n* // returns {...}\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns {...}\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns {...}\n*\n* // Retrieve the current cluster results:\n* out = accumulator();\n* // returns {...}\n*/\nfunction incrkmeans() {\n\tvar clusterstats;\n\tvar centroids;\n\tvar incrstats;\n\tvar options;\n\tvar results;\n\tvar vcopy;\n\tvar stats;\n\tvar ndims;\n\tvar dist;\n\tvar opts;\n\tvar init;\n\tvar err;\n\tvar FLG;\n\tvar k;\n\n\tif ( isMatrixLike( arguments[ 0 ] ) ) {\n\t\tk = arguments[ 0 ].shape[ 0 ];\n\t\tndims = arguments[ 0 ].shape[ 1 ];\n\t\tcentroids = createMatrix( k, ndims, true ); // low-level\n\t\tcentroids = copyMatrix( centroids, arguments[ 0 ] );\n\t\tif ( arguments.length > 1 ) {\n\t\t\toptions = arguments[ 1 ];\n\t\t\tFLG = true;\n\t\t}\n\t} else if ( isPositiveInteger( arguments[ 0 ] ) ) {\n\t\tk = arguments[ 0 ];\n\t\tndims = arguments[ 1 ];\n\t\tif ( !isPositiveInteger( ndims ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument specifying number of dimensions must be a positive integer. Value: `%s`.', ndims ) );\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\toptions = arguments[ 2 ];\n\t\t\tFLG = true;\n\t\t}\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must either be a positive integer specifying the number of clusters or a matrix containing initial centroids. Value: `%s`.', arguments[ 0 ] ) );\n\t}\n\topts = {\n\t\t'metric': 'euclidean',\n\t\t'init': INIT_DEFAULTS[ 'kmeans++' ].slice(),\n\t\t'seed': minstd(),\n\t\t'normalize': true,\n\t\t'copy': true\n\t};\n\topts.init[ 1 ] = k; // Note: this default applies to all initialization methods\n\topts.init[ 2 ] = 2 + floor( ln( k ) ); // Note: from Arthur's and Vassilvitskii's paper \"kmeans++: The Advantages of Careful Seeding\" (see conclusion)\n\tif ( FLG ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.init[ 1 ] < k ) {\n\t\tthrow new RangeError( format( 'invalid option. First `init` parameter option must be greater than or equal to the number of clusters. Options: `%f`.', opts.init[ 1 ] ) );\n\t}\n\t// Initialize a results object:\n\tresults = createResults( k, ndims );\n\n\t// Initialize an internal matrix for tabulating cluster statistics:\n\tstats = createMatrix( k, NSTATS, true ); // low-level\n\n\t// Initialize an internal cluster statistics accumulator:\n\tclusterstats = statistics( stats, k );\n\n\t// Initialize metric-related variables...\n\tif ( opts.metric === 'cosine' ) {\n\t\tdist = squaredCosine;\n\n\t\t// Initialize a scratch vector for copying input vectors:\n\t\tif ( opts.copy ) {\n\t\t\tvcopy = createVector( ndims, true ); // low-level\n\t\t}\n\t} else if ( opts.metric === 'correlation' ) {\n\t\tdist = squaredCorrelation;\n\n\t\t// Initialize an accumulator for computing the mean vector and associated standard deviation along each dimension:\n\t\tif ( opts.normalize ) {\n\t\t\tincrstats = incrstatistics( ndims );\n\t\t}\n\t\t// Initialize a scratch vector for copying input vectors:\n\t\tif ( opts.copy ) {\n\t\t\tvcopy = createVector( ndims, true ); // low-level\n\t\t}\n\t} else {\n\t\tdist = squaredEuclidean;\n\t}\n\t// Check if we need to compute initial centroids...\n\tif ( centroids === void 0 ) {\n\t\t// Initialize an internal matrix for storing centroids:\n\t\tcentroids = createMatrix( k, ndims, true ); // low-level\n\n\t\t// Initialize an accumulator for computing initial centroids:\n\t\tinit = initialization( centroids, stats, clusterstats, incrstats, dist, opts ); // eslint-disable-line max-len\n\t} else {\n\t\t// Update cluster results to include the initial centroids (why? so that, even if no data is provided, the `results` object contains the provided centroids):\n\t\tcopyMatrix( results.centroids, centroids );\n\t}\n\t// Attach properties and methods to the accumulator:\n\tsetReadOnly( accumulator, 'seed', opts.seed );\n\tsetReadOnly( accumulator, 'predict', predict );\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a data point vector, the accumulator function returns updated cluster results. If not provided a data point vector, the accumulator function returns the current cluster results.\n\t*\n\t* @private\n\t* @param {ndarray} [vec] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match centroid dimensions\n\t* @returns {(Object|null)} cluster results or null\n\t*/\n\tfunction accumulator( vec ) {\n\t\tvar bool;\n\t\tvar cbuf;\n\t\tvar vbuf;\n\t\tvar sbuf;\n\t\tvar sv;\n\t\tvar sc;\n\t\tvar ov;\n\t\tvar oc;\n\t\tvar v;\n\t\tvar N;\n\t\tvar d;\n\t\tvar c;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( init ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t\tv = vec; // Why? We mention `arguments` in the function and perform a subsequent reassignment.\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== ndims ) {\n\t\t\tthrow new Error( format( 'invalid argument. Vector length must match centroid dimensions. Expected: `%u``. Actual: `%u``.', ndims, v.shape[ 0 ] ) );\n\t\t}\n\t\t// Check if we need to update the data point mean vector...\n\t\tif ( incrstats ) {\n\t\t\tincrstats( v );\n\t\t}\n\t\t// Check if we have yet to compute initial centroids...\n\t\tif ( init ) {\n\t\t\tbool = init( v );\n\t\t\tif ( bool === false ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// De-reference `init` so that it and its internal variables can be garbage collected:\n\t\t\tinit = void 0;\n\t\t} else {\n\t\t\t// If required by the metric, normalize the data vector...\n\t\t\tif ( opts.normalize ) {\n\t\t\t\tif ( opts.metric === 'cosine' ) {\n\t\t\t\t\tif ( opts.copy ) {\n\t\t\t\t\t\tv = copyVector( vcopy, v );\n\t\t\t\t\t}\n\t\t\t\t\tnormalize( ndims, v.data, v.strides[ 0 ], v.offset );\n\t\t\t\t} else if ( opts.metric === 'correlation' ) {\n\t\t\t\t\tif ( opts.copy ) {\n\t\t\t\t\t\tv = copyVector( vcopy, v );\n\t\t\t\t\t}\n\t\t\t\t\tsbuf = incrstats();\n\n\t\t\t\t\t// Magic numbers come from knowing that `sbuf` is an interleaved strided array...\n\t\t\t\t\tstandardize( ndims, v.data, v.strides[ 0 ], v.offset, sbuf, 2, 0, sbuf, 2, 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t\tcbuf = centroids.data;\n\t\t\tsc = centroids.strides[ 0 ];\n\n\t\t\tvbuf = v.data;\n\t\t\tsv = v.strides[ 0 ];\n\t\t\tov = v.offset;\n\n\t\t\t// Find the closest centroid by computing the distance from the provided data point to each centroid:\n\t\t\tc = closestCentroid( dist, k, ndims, cbuf, sc, 0, vbuf, sv, ov ); // Magic number `0` for offset as we know that the matrix view begins at the first buffer element\n\n\t\t\t// Compute the centroids buffer index offset to point to the closest centroid:\n\t\t\toc = sc * c;\n\n\t\t\t// Update the closest centroid:\n\t\t\tN = stats.get( c, 0 ) + 1;\n\t\t\tupdateCentroid( ndims, N, cbuf, 1, oc, vbuf, sv, ov ); // Magic number `1` as we know that the matrix is row-major single-segment contiguous\n\n\t\t\t// Recompute the distance based on the updated centroid position:\n\t\t\td = dist( ndims, cbuf, 1, oc, vbuf, sv, ov ); // Magic number `1` as we know that the matrix is row-major single-segment contiguous\n\n\t\t\t// Update cluster statistics:\n\t\t\tclusterstats( c, d );\n\t\t}\n\t\t// Update the results object:\n\t\tdcopy( centroids.length, centroids.data, 1, results.centroids.data, 1 ); // Magic number `1` as we know that these matrices are row-major single-segment contiguous\n\t\tdcopy( stats.length, stats.data, 1, results.stats.data, 1 ); // Magic number `1` as we know that these matrices are row-major single-segment contiguous\n\n\t\treturn results;\n\t}\n\n\t/**\n\t* Computes data point distances to centroids and returns centroid assignment predictions.\n\t*\n\t* @private\n\t* @param {ndarray} [out] - output vector for storing centroid assignment predictions\n\t* @param {ndarray} X - matrix containing data points (`n x d`, where `n` is the number of data points and `d` is the number of dimensions)\n\t* @throws {TypeError} output argument must be a vector\n\t* @throws {TypeError} must provide a matrix\n\t* @throws {Error} vector length must match number of data points\n\t* @throws {Error} number of matrix columns must match centroid dimensions\n\t* @returns {(ndarray|null)} vector containing centroid (index) predictions or null\n\t*/\n\tfunction predict( out, X ) {\n\t\tvar xbuf;\n\t\tvar cbuf;\n\t\tvar npts;\n\t\tvar sx1;\n\t\tvar sx2;\n\t\tvar sc;\n\t\tvar ox;\n\t\tvar x;\n\t\tvar o;\n\t\tvar c;\n\t\tvar i;\n\t\tif ( arguments.length > 1 ) {\n\t\t\tif ( !isVectorLike( out ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be a 1-dimensional ndarray. Value: `%s`.', out ) );\n\t\t\t}\n\t\t\to = out;\n\t\t\tx = X;\n\t\t} else {\n\t\t\tx = out;\n\t\t}\n\t\tif ( !isMatrixLike( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 2-dimensional ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( x.shape[ 1 ] !== ndims ) {\n\t\t\tthrow new Error( format( 'invalid argument. Number of matrix columns must match centroid dimensions. Expected: `%u``. Actual: `%u`.', ndims, x.shape[ 1 ] ) );\n\t\t}\n\t\tif ( o === void 0 ) {\n\t\t\to = createVector( x.shape[ 0 ], false ); // high-level\n\t\t} else if ( o.length !== x.shape[ 0 ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Output vector length must match the number of data points. Expected: `%u`. Actual: `%u`.', x.shape[ 0 ], o.length ) );\n\t\t}\n\t\tif ( init ) {\n\t\t\treturn null;\n\t\t}\n\t\tnpts = x.shape[ 0 ];\n\n\t\t// If required by the metric, normalize the data vectors along the dimensions...\n\t\tif ( opts.normalize ) {\n\t\t\tif ( opts.metric === 'cosine' ) {\n\t\t\t\tif ( opts.copy ) {\n\t\t\t\t\tx = copyMatrix( createMatrix( npts, ndims, true ), x ); // low-level\n\t\t\t\t}\n\t\t\t\tx = normalizeMatrix( x );\n\t\t\t} else if ( opts.metric === 'correlation' ) {\n\t\t\t\tif ( opts.copy ) {\n\t\t\t\t\tx = copyMatrix( createMatrix( npts, ndims, true ), x ); // low-level\n\t\t\t\t}\n\t\t\t\tx = standardizeMatrix( x, incrstats() );\n\t\t\t}\n\t\t}\n\t\tcbuf = centroids.data;\n\t\tsc = centroids.strides[ 0 ];\n\n\t\txbuf = x.data;\n\t\tsx1 = x.strides[ 0 ];\n\t\tsx2 = x.strides[ 1 ];\n\t\tox = x.offset;\n\n\t\t// For each data point, find the closest centroid...\n\t\tfor ( i = 0; i < npts; i++ ) {\n\t\t\tc = closestCentroid( dist, k, ndims, cbuf, sc, 0, xbuf, sx2, ox ); // Magic number `0` for offset as we know that the matrix view begins at the first buffer element\n\n\t\t\t// Update the output vector:\n\t\t\to.set( i, c );\n\n\t\t\t// Compute the data point buffer index offset to point to the next data point:\n\t\t\tox += sx1;\n\t\t}\n\t\treturn o;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrkmeans;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Incrementally partition data into `k` clusters.\n*\n* @module @stdlib/ml/incr/kmeans\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n* var incrkmeans = require( '@stdlib/ml/incr/kmeans' );\n*\n* // Define initial centroid locations:\n* var buffer = [\n*     0.0, 0.0,\n*     1.0, 1.0,\n*     1.0, -1.0,\n*     -1.0, -1.0,\n*     -1.0, 1.0\n* ];\n* var shape = [ 5, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var centroids = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a k-means accumulator:\n* var accumulator = incrkmeans( centroids );\n*\n* var out = accumulator();\n* // returns {...}\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns {...}\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns {...}\n*\n* // Retrieve the current cluster results:\n* out = accumulator();\n* // returns {...}\n*/\n\n// MAIN //\n\nvar incrkmeans = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrkmeans;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculates the dot product of two vectors.\n*\n* @private\n* @param {NumericArray} x - first vector\n* @param {NumericArray} y - second vector\n* @returns {number} dot product\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0 ];\n* var y = [ 1.0, 2.0, 2.0 ];\n*\n* var ret = dot( x, y );\n* // returns 11.0\n*/\nfunction dot( x, y ) {\n\tvar len = x.length;\n\tvar ret = 0;\n\tvar i;\n\n\tfor ( i = 0; i < len; i++ ) {\n\t\tret += x[ i ] * y[ i ];\n\t}\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* The weight vector implementation was inspired by the [sofia-ml]{@link https://code.google.com/archive/p/sofia-ml/} library.\n*/\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar format = require( '@stdlib/string/format' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar dot = require( './dot.js' );\n\n\n// VARIABLES //\n\nvar MIN_SCALE = 1.0e-11;\n\n\n// FUNCTIONS //\n\n/**\n* Scale elements of the weight vector by the supplied factor.\n*\n* @private\n* @param {number} factor - scaling factor\n* @throws {RangeError} `lambda` times `eta` must be large enough for the scaling weight to be nonnegative\n*/\nfunction scaleTo( factor ) {\n\t/* eslint-disable no-invalid-this */\n\tvar i;\n\tif ( this.scale < MIN_SCALE ) {\n\t\t// Scale vector to one:\n\t\tfor ( i = 0; i < this.nWeights; i++ ) {\n\t\t\tthis._data[ i ] *= this.scale;\n\t\t}\n\t\tthis.scale = 1.0;\n\t}\n\n\tthis.norm *= pow( factor, 2 );\n\n\tif ( factor > 0.0 ) {\n\t\tthis.scale *= factor;\n\t} else {\n\t\tthrow new RangeError( format( 'Scaling weight vector by nonpositive value, likely due to too large value of eta * lambda. Value: `%f`.', factor ) );\n\t}\n}\n\n/**\n* Adds vector `x` to the weight vector after scaling its elements.\n*\n* @private\n* @param {NumericArray} x - vector to add\n* @param {number} [xScale=1.0] - number to scale the elements of x with\n*/\nfunction add( x, xScale ) {\n\t/* eslint-disable no-invalid-this */\n\tvar xscaled;\n\tvar inner;\n\tvar i;\n\n\tinner = 0.0;\n\tif ( xScale === void 0 ) {\n\t\txScale = 1.0;\n\t}\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\txscaled = x[ i ] * xScale;\n\t\tinner += this._data[i] * xscaled;\n\t\tthis._data[ i ] = this._data[ i ] + ( xscaled / this.scale );\n\t}\n\t// If an intercept is assumed, treat `x` as containing one additional element equal to one...\n\tif ( this.intercept ) {\n\t\txscaled = 1.0 * xScale;\n\t\tinner += this._data[ i ] * xscaled;\n\t\tthis._data[ i ] = this._data[ i ] + ( xscaled / this.scale );\n\t}\n\tthis.norm += ( ( dot( x, x ) + ( ( this.intercept ) ? 1.0 : 0.0 ) ) *\n\t\tpow( xScale, 2 ) ) +\n\t\t( 2.0 * this.scale * inner );\n}\n\n/**\n* Calculates the inner product of the weights and supplied vector `x`.\n*\n* @private\n* @param {NumericArray} x - input vector\n* @returns {number} inner product\n*/\nfunction innerProduct( x ) {\n\t/* eslint-disable no-invalid-this */\n\tvar ret = 0;\n\tvar i;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tret += this._data[ i ] * x[ i ];\n\t}\n\tret += ( this.intercept ) ? this._data[ i ] : 0.0;\n\tret *= this.scale;\n\treturn ret;\n}\n\n\n// MAIN //\n\n/**\n* Creates a WeightVector.\n*\n* @constructor\n* @param {PositiveInteger} dim - number of feature weights (excluding bias/intercept term)\n* @param {boolean} intercept - boolean indicating whether a bias/intercept weight should be implicitly assumed\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a boolean\n*/\nfunction WeightVector( dim, intercept ) {\n\tvar i;\n\tif ( !(this instanceof WeightVector) ) {\n\t\treturn new WeightVector( dim, intercept );\n\t}\n\tif ( !isPositiveInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `dim` must be a positive integer. Value: `%s`.', dim ) );\n\t}\n\tif ( !isBoolean( intercept ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `intercept` must be a boolean. Value: `%s`.', intercept ) );\n\t}\n\n\tthis.scale = 1.0;\n\tthis.norm = 0.0;\n\tthis.intercept = intercept;\n\tthis.nWeights = dim + ( ( this.intercept ) ? 1 : 0 );\n\n\tthis._data = new Array( this.nWeights );\n\n\t// Initialize weights to zero:\n\tfor ( i = 0; i < this.nWeights; i++ ) {\n\t\tthis._data[ i ] = 0.0;\n\t}\n}\n\n/**\n* Scale elements of the weight vector by the supplied factor.\n*\n* @memberof WeightVector.prototype\n* @function scaleTo\n* @param {number} factor - scaling factor\n* @throws {RangeError} `lambda` times `eta` must be large enough for the scaling weight to be nonnegative\n*/\nsetReadOnly( WeightVector.prototype, 'scaleTo', scaleTo );\n\n/**\n* Adds vector `x` to the weight vector after scaling its elements.\n*\n* @memberof WeightVector.prototype\n* @function add\n* @param {NumericArray} x - vector to add\n* @param {number} [xScale=1.0] - number to scale the elements of x with\n*/\nsetReadOnly( WeightVector.prototype, 'add', add );\n\n/**\n* Calculates the inner product of the weights and supplied vector `x`.\n*\n* @memberof WeightVector.prototype\n* @function innerProduct\n* @param {NumericArray} x - input vector\n* @returns {number} inner product\n*/\nsetReadOnly( WeightVector.prototype, 'innerProduct', innerProduct );\n\n\n// EXPORTS //\n\nmodule.exports = WeightVector;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar max = require( '@stdlib/math/base/special/max' );\n\n\n// VARIABLES //\n\nvar MIN_SCALING_FACTOR = 1e-7;\n\n\n// MAIN //\n\n/**\n* L2 regularization of feature weights.\n*\n* @private\n* @param {WeightVector} weights - current model coefficients\n* @param {NonNegativeNumber} lambda - regularization parameter\n* @param {PositiveNumber} eta - current learning rate\n*/\nfunction regularize( weights, lambda, eta ) {\n\tvar scalingFactor;\n\tif ( lambda > 0.0 ) {\n\t\tscalingFactor = 1.0 - ( eta * lambda );\n\t\tweights.scaleTo( max( scalingFactor, MIN_SCALING_FACTOR ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = regularize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar regularize = require( './../regularize.js' );\n\n\n// MAIN //\n\n/**\n* Given a new observation `(x,y)`, updates the weights using the epsilon-insensitive loss.\n*\n* ## Notes\n*\n* The penalty of the epsilon-insensitive loss is the absolute value of the dot product of the weights and `x` minus `y` whenever the absolute error exceeds epsilon, and zero otherwise.\n*\n* @private\n* @param {WeightVector} weights - current model coefficients\n* @param {NumericArray} x - feature vector\n* @param {number} y - response value\n* @param {PositiveNumber} eta - current learning rate\n* @param {NonNegativeNumber} lambda - regularization parameter\n* @param {PositiveNumber} epsilon - insensitivity parameter\n*/\nfunction epsilonInsensitiveLoss( weights, x, y, eta, lambda, epsilon ) {\n\tvar p = weights.innerProduct( x ) - y;\n\n\t// Perform L2 regularization...\n\tregularize( weights, lambda, eta );\n\n\tif ( p > epsilon ) {\n\t\tweights.add( x, -eta );\n\t} else if ( p < -epsilon ) {\n\t\tweights.add( x, +eta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = epsilonInsensitiveLoss;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar regularize = require( './../regularize.js' );\n\n\n// MAIN //\n\n/**\n* Given a new observation `(x,y)`, updates the weights using the squared error loss.\n*\n* ## Notes\n*\n* The squared error loss is defined as the squared difference of the observed and fitted value.\n*\n* @private\n* @param {WeightVector} weights - current model coefficients\n* @param {NumericArray} x - feature vector\n* @param {number} y - response value\n* @param {PositiveNumber} eta - current learning rate\n* @param {NonNegativeNumber} lambda - regularization parameter\n*/\nfunction squaredErrorLoss( weights, x, y, eta, lambda ) {\n\tvar loss = y - weights.innerProduct( x );\n\n\t// Perform L2 regularization...\n\tregularize( weights, lambda, eta );\n\n\tweights.add( x, ( eta * loss ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = squaredErrorLoss;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar regularize = require( './../regularize.js' );\n\n\n// MAIN //\n\n/**\n* Given a new observation `(x,y)`, updates the weights using the [Huber loss][1] function.\n*\n* ## Notes\n*\n* The Huber loss uses squared-error loss for observations with error smaller than epsilon in magnitude and linear loss above that in order to decrease the influence of outliers on the model fit.\n*\n* [1]: https://en.wikipedia.org/wiki/Huber_loss\n*\n* @private\n* @param {WeightVector} weights - current model coefficients\n* @param {NumericArray} x - feature vector\n* @param {number} y - response value\n* @param {PositiveNumber} eta - current learning rate\n* @param {NonNegativeNumber} lambda - regularization parameter\n* @param {PositiveNumber} epsilon - insensitivity parameter\n*/\nfunction huberLoss( weights, x, y, eta, lambda, epsilon ) {\n\tvar p = weights.innerProduct( x ) - y;\n\n\t// Perform L2 regularization...\n\tregularize( weights, lambda, eta );\n\n\tif ( p > epsilon ) {\n\t\tweights.add( x, -eta );\n\t} else if ( p < -epsilon ) {\n\t\tweights.add( x, +eta );\n\t} else {\n\t\tweights.add( x, -eta * p );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = huberLoss;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a function to retrieve the current learning rate.\n*\n* @private\n* @param {string} type - string denoting the learning rate to use. Can be `constant`, `pegasos` or `basic`.\n* @param {PositiveNumber} eta0 - constant learning rate\n* @param {NonNegativeNumber} lambda - regularization parameter\n* @throws {Error} first argument must be `basic`, `constant` or `pegasos`\n* @returns {Function} getEta function\n*/\nfunction closure( type, eta0, lambda ) {\n\tvar iter;\n\tvar ret;\n\n\titer = 1;\n\n\tswitch ( type ) {\n\tcase 'basic':\n\t\t// Default case: 'basic'\n\t\tret = getEtaBasic;\n\t\tbreak;\n\tcase 'constant':\n\t\tret = getEtaConstant;\n\t\tbreak;\n\tcase 'pegasos':\n\t\tret = getEtaPegasos;\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'invalid input value. `learningRate` must be either `basic`, `constant` or `pegasos`. Value: `%s`.', type ) );\n\t}\n\treturn ret;\n\n\t/**\n\t* Returns the basic learning rate.\n\t*\n\t* @private\n\t* @returns {number} learning rate\n\t*/\n\tfunction getEtaBasic() {\n\t\tvar eta = 1000.0 / ( iter + 1000.0 );\n\t\titer += 1;\n\t\treturn eta;\n\t}\n\n\t/**\n\t* Returns the constant learning rate.\n\t*\n\t* @private\n\t* @returns {number} learning rate\n\t*/\n\tfunction getEtaConstant() {\n\t\titer += 1;\n\t\treturn eta0;\n\t}\n\n\t/**\n\t* Returns the Pegasos learning rate.\n\t*\n\t* @private\n\t* @returns {number} learning rate\n\t*/\n\tfunction getEtaPegasos() {\n\t\tvar eta = 1.0 / ( lambda * iter );\n\t\titer += 1;\n\t\treturn eta;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = closure;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.epsilon] - insensitivity parameter\n* @param {PositiveNumber} [options.eta0] - constant learning rate\n* @param {PositiveNumber} [options.lambda] - regularization parameter\n* @param {string} [options.learningRate] - the learning rate to use\n* @param {string} [options.loss] -  the loss function to use\n* @param {boolean} [options.intercept] - specifies whether an intercept should be included\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'epsilon' ) ) {\n\t\topts.epsilon = options.epsilon;\n\t\tif ( !isPositiveNumber( opts.epsilon ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'epsilon', opts.epsilon ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'eta0' ) ) {\n\t\topts.eta0 = options.eta0;\n\t\tif ( !isPositiveNumber( opts.eta0 ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'eta0', opts.eta0 ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'lambda' ) ) {\n\t\topts.lambda = options.lambda;\n\t\tif ( !isNonNegativeNumber( opts.lambda ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'lambda', opts.lambda ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'learningRate' ) ) {\n\t\topts.learningRate = options.learningRate;\n\t\tif ( !isString( opts.learningRate ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'learningRate', opts.learningRate ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'loss' ) ) {\n\t\topts.loss = options.loss;\n\t\tif ( !isString( opts.loss ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'loss', opts.loss ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'intercept' ) ) {\n\t\topts.intercept = options.intercept;\n\t\tif ( !isBoolean( opts.intercept ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'intercept', opts.intercept ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable */ // TODO: fix me\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert/is-array' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar WeightVector = require( './weight_vector.js' );\nvar epsilonInsensitiveLoss = require( './loss/epsilon_insensitive.js' );\nvar squaredErrorLoss = require( './loss/squared_error.js' );\nvar huberLoss = require( './loss/huber.js' );\nvar getEta = require( './eta_factory.js' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Online learning for regression using stochastic gradient descent (SGD).\n*\n* ## Method\n*\n* The sub-gradient of the loss function is estimated for each datum and the regression model is updated incrementally, with a decreasing learning rate and regularization of the feature weights based on L2 regularization.\n*\n* ## References\n*\n* -   Shalev-Shwartz, S., Singer, Y., Srebro, N., & Cotter, A. (2011). Pegasos: Primal estimated sub-gradient solver for SVM. Mathematical Programming, 127(1), 3–30. doi:10.1007/s10107-010-0420-4\n*\n* @param {Object} [options] - options object\n* @param {PositiveNumber} [options.epsilon=0.1] - insensitivity parameter\n* @param {PositiveNumber} [options.eta0=0.02] - constant learning rate\n* @param {NonNegativeNumber} [options.lambda=1e-3] - regularization parameter\n* @param {string} [options.learningRate='basic'] - string denoting the learning rate to use. Can be `constant`, `pegasos`, or `basic`\n* @param {string} [options.loss='squaredError'] - string denoting the loss function to use. Can be `squaredError`, `epsilonInsensitive`, or `huber`\n* @param {boolean} [options.intercept=true] - boolean indicating whether to include an intercept\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} regression model\n*\n* @example\n* var incrSGDRegression = require( '@stdlib/streams/ml/incr/sgd-regression' );\n*\n* var accumulator = incrSGDRegression({\n*     'intercept': true\n*     'lambda': 1e-5\n* });\n*\n* // Update model as observations come in:\n* var y = 3.5;\n* var x = [ 2.3, 1.0, 5.0 ];\n* accumulator( x, y );\n*\n* // Predict new observation:\n* var yHat = accumulator.predict( x );\n*\n* // Retrieve coefficients:\n* var coefs = accumulator.coefs;\n*/\nfunction incrSGDRegression( options ) {\n\tvar _nFeatures;\n\tvar _lossfun;\n\tvar _weights;\n\tvar _getEta;\n\tvar accumulator;\n\tvar opts;\n\tvar err;\n\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t_weights = null;\n\n\t// Set loss function:\n\tswitch ( opts.loss ) {\n\tcase 'epsilonInsensitive':\n\t\t_lossfun = epsilonInsensitiveLoss;\n\tbreak;\n\tcase 'huber':\n\t\t_lossfun = huberLoss;\n\tbreak;\n\tcase 'squaredError':\n\t\t_lossfun = squaredErrorLoss;\n\tbreak;\n\tdefault:\n\t\tthrow Error( format( 'invalid input value. `loss` option must be either `epsilonInsensitive`, `huber` or `squaredError`. Value: `%s`.', opts.loss ) );\n\t}\n\n\t// Set learning rate:\n\t_getEta = getEta( opts.learningRate, opts.eta0, opts.lambda );\n\n\t/**\n\t* Update weights given new observations `y` and `x`.\n\t*\n\t* @param {NumericArray} x - feature vector\n\t* @param {number} y - response value\n\t* @throws {TypeError} first argument must be an array\n\t* @throws {TypeError} first argument must have length equal to the number of predictors\n\t*\n\t* @example\n\t* // Update model as observations come in:\n\t* var y = 3.5;\n\t* var x = [ 2.3, 1.0, 5.0 ];\n\t* accumulator( x, y );\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar eta;\n\n\t\tif ( !isArray( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid input value. First argument `x` must be an array. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !_weights ) {\n\t\t\t_weights = new WeightVector( x.length, opts.intercept );\n\t\t\t_nFeatures = opts.intercept ? _weights.nWeights - 1 : _weights.nWeights;\n\t\t}\n\t\tif ( x.length !== _nFeatures ) {\n\t\t\tthrow new TypeError( format( 'invalid input value. First argument `x` must be an array of length `%u`. Value: `%s`', _nFeatures, x ) );\n\t\t}\n\n\t\t// Get current learning rate...\n\t\teta = _getEta();\n\n\t\t// Update weights depending on the chosen loss function...\n\t\t_lossfun( _weights, x, y, eta, opts.lambda, opts.epsilon );\n\t}\n\n\tsetNonEnumerableReadOnlyAccessor( accumulator, 'coefs', getCoefs );\n\tsetReadOnly( accumulator, 'predict', predict );\n\treturn accumulator;\n\n\t/**\n\t* Model coefficients / feature weights.\n\t*\n\t* @private\n\t* @name coefs\n\t* @type {Array}\n\t*\n\t* @example\n\t* // Retrieve coefficients:\n\t* var coefs = accumulator.coefs;\n\t*/\n\tfunction getCoefs() {\n\t\tvar ret;\n\t\tvar i;\n\n\t\tret = new Array( _weights.nWeights );\n\t\tfor ( i = 0; i < ret.length; i++ ) {\n\t\t\tret[ i ] = _weights._data[ i ] * _weights.scale;\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t* Predict response for a new observation with features `x`.\n\t*\n\t* @private\n\t* @param {NumericArray} x - feature vector\n\t* @throws {TypeError} first argument must be an array\n\t* @throws {TypeError} first argument must have length equal to the number of predictors\n\t* @returns {number} response value\n\t*\n\t* @example\n\t* // Predict new observation:\n\t* var x = [ 2.3, 5.3, 8.6 ];\n\t* var yHat = accumulator.predict( x );\n\t*/\n\tfunction predict( x ) {\n\t\tif ( !isArray( x ) || x.length !== _nFeatures ) {\n\t\t\tthrow new TypeError( format( 'invalid input value. First argument `x` must be an array of length %u. Value: `%s`', _nFeatures || 0, x ) );\n\t\t}\n\t\treturn _weights.innerProduct( x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrSGDRegression;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Online learning for regression using stochastic gradient descent (SGD).\n*\n* @module @stdlib/ml/incr/sgd-regression\n*\n* @example\n* var incrSGDRegression = require( '@stdlib/ml/incr/sgd-regression' );\n*\n* var accumulator = incrSGDRegression({\n*     'intercept': true\n*     'lambda': 1e-5\n* });\n*\n* var y = 3.5;\n* var x = [ 2.3, 1.0, 5.0 ];\n* accumulator( x, y );\n*/\n\n// MODULES //\n\nvar incrSGDRegression = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrSGDRegression;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name incrBinaryClassification\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ml/incr/binary-classification}\n*/\nsetReadOnly( ns, 'incrBinaryClassification', require( './../../incr/binary-classification' ) );\n\n/**\n* @name incrkmeans\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ml/incr/kmeans}\n*/\nsetReadOnly( ns, 'incrkmeans', require( './../../incr/kmeans' ) );\n\n/**\n* @name incrSGDRegression\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ml/incr/sgd-regression}\n*/\nsetReadOnly( ns, 'incrSGDRegression', require( './../../incr/sgd-regression' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name incr\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/ml/incr}\n*/\nsetReadOnly( ns, 'incr', require( './../incr' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],"names":["setReadOnly","require$$0","setReadOnlyAccessor","require$$1","format","require$$2","gdot","require$$3","ndarray","gaxpy","require$$4","dcopy","require$$5","dscal","require$$6","max","require$$7","exp","require$$8","pow","require$$9","sigmoid","require$$10","Float64Array","require$$11","require$$12","shape2strides","require$$13","numel","require$$14","vind2bind","require$$15","LEARNING_RATE_METHODS","basic","constant","invscaling","pegasos","LOSS_METHODS","hinge","log","modifiedHuber","perceptron","squaredHinge","Model","N","opts","len","this","_N","_opts","_scaleFactor","_t","_learningRateMethod","learningRate","_lossMethod","loss","intercept","_weights","_coefficients","prototype","x","scale","s","w","shape","data","strides","offset","buf","stride","v","y","eta","_regularize","_dot","_add","params","d","lambda","_scale","factor","RangeError","c","length","X","type","ndims","xbuf","ybuf","xsh","ysh","ord","ptr","sxn","sx","sy","ox","M","Y","i","order","push","iset","model","isNonNegativeNumber","isPrimitive","isPositiveNumber","isNumber","isBoolean","isArrayLikeObject","isObject","hasOwnProp","contains","LEARNING_RATES","LOSS_FUNCTIONS","validate_1","options","name","TypeError","join","isPositiveInteger","isVectorLike","isndarrayLike","LEARNING_RATE_DEFAULTS","validate","main","err","slice","arguments","accumulator","predict","coefficients","nfeatures","update","sh","t","Error","lib","ctor","bctor","matrix","m","n","bool","gcopy","copy_matrix","sx1","sx2","sy1","sy2","oy","vector","copy_vector","out","src","isArrayLike","METRICS","INIT_METHODS","metric","init","normalize","copy","seed","sqrt","normalize_1","strideX","offsetX","xi","norm","normalize_matrix","mat","mbuf","sm1","sm2","om","standardize_1","mean","strideM","offsetM","stdev","strideS","offsetS","mi","si","standardize_matrix","stats","factory","init_sample","buffer","inds","obuf","sb1","sb2","so2","oo","size","mutate","replacement","rand","euclidean","strideY","offsetY","yi","squared_euclidean","dot_1","dot","squared_cosine","squared_correlation","randint","randu","PINF","squaredEuclidean","squaredCosine","squaredCorrelation","dapply","dist","npts","ci","offsetC","offsetD","strideD","init_kmeansplusplus","trials","centroids","randi","dhash","probs","csum","bsum","ind","so1","d2","bc","k","r","j","normalized","Array","incrmean","init_forgy","acc","oa","ob","find_closest_centroid","C","strideC","V","strideV","offsetV","cd","update_centroid","closestCentroid","updateCentroid","init_clusters","cbuf","dbuf","sc","sd","oc","od","get","createMatrix","standardize","sample","kmeansplusplus","forgy","clusters","init_1","clusterstats","incrstats","count","stats_1","M2","delta","mu","set","incrmeanstdev","incrstats_1","BYTES_PER_ELEMENT","vec","isMatrixLike","minstd","floor","ln","copyMatrix","createVector","copyVector","INIT_DEFAULTS","initialization","statistics","require$$16","incrstatistics","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","normalizeMatrix","require$$24","require$$25","standardizeMatrix","require$$26","createResults","results","vcopy","FLG","vbuf","sbuf","sv","ov","o","ret","WeightVector","dim","nWeights","_data","xScale","xscaled","inner","weight_vector","regularize_1","weights","scalingFactor","scaleTo","regularize","epsilon_insensitive","epsilon","p","innerProduct","add","squared_error","huber","eta_factory","eta0","iter","isString","isArray","setNonEnumerableReadOnlyAccessor","epsilonInsensitiveLoss","squaredErrorLoss","huberLoss","getEta","DEFAULTS","_nFeatures","_lossfun","_getEta","getCoefs","ns"],"mappings":"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"}